{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/models-table-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/f.js","dummy/tests/helpers/get-page-object.js","dummy/tests/helpers/get-theme-class.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/models-table-server-paginated-test.js","dummy/tests/integration/components/models-table-test.js","dummy/tests/integration/components/models-table/cell-content-display-test.js","dummy/tests/integration/components/models-table/cell-content-edit-test.js","dummy/tests/integration/components/models-table/cell-edit-toggle-test.js","dummy/tests/integration/components/models-table/cell-test.js","dummy/tests/integration/components/models-table/data-group-by-select-test.js","dummy/tests/integration/components/models-table/group-summary-row-test.js","dummy/tests/integration/components/models-table/page-size-select-test.js","dummy/tests/integration/components/models-table/pagination-numeric-test.js","dummy/tests/integration/components/models-table/row-filtering-cell-test.js","dummy/tests/integration/components/models-table/row-group-toggle-test.js","dummy/tests/integration/components/models-table/row-grouping-test.js","dummy/tests/integration/components/models-table/row-sorting-cell-test.js","dummy/tests/integration/components/models-table/themes/bootstrap4/columns-dropdown-test.js","dummy/tests/integration/components/models-table/themes/bootstrap4/data-group-by-select-test.js","dummy/tests/integration/components/models-table/themes/bootstrap4/global-filter-test.js","dummy/tests/integration/components/models-table/themes/bootstrap4/row-filtering-cell-test.js","dummy/tests/integration/components/models-table/themes/ember-semanticui/row-filtering-cell-test.js","dummy/tests/integration/components/models-table/themes/semanticui/columns-dropdown-test.js","dummy/tests/integration/components/models-table/themes/semanticui/data-group-by-select-test.js","dummy/tests/integration/components/models-table/themes/semanticui/global-filter-test.js","dummy/tests/integration/components/models-table/themes/semanticui/pagination-numeric-test.js","dummy/tests/integration/components/models-table/themes/semanticui/pagination-simple-test.js","dummy/tests/integration/components/models-table/themes/semanticui/row-filtering-cell-test.js","dummy/tests/integration/components/models-table/themes/semanticui/select-test.js","dummy/tests/integration/components/models-table/themes/semanticui/summary-test.js","dummy/tests/integration/helpers/and-test.js","dummy/tests/integration/helpers/not-eq-test.js","dummy/tests/integration/helpers/stringify-test.js","dummy/tests/lint/app.lint-test.js","dummy/tests/lint/templates.template.lint-test.js","dummy/tests/lint/tests.lint-test.js","dummy/tests/page-object.js","dummy/tests/pages/models-table-bs.js","dummy/tests/pages/models-table-bs4.js","dummy/tests/pages/models-table-semanticui.js","dummy/tests/test-helper.js","dummy/tests/unit/components/models-table-server-paginated-test.js","dummy/tests/unit/utils/better-compare-test.js","dummy/tests/unit/utils/fmt-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/acceptance/models-table-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"@ember/test-helpers\", \"ember-a11y-testing/test-support/audit\"], function (_qunit, _emberQunit, _setupMirage, _testHelpers, _audit) {\n  \"use strict\";\n\n  let firstUser;\n  (0, _qunit.module)('Acceptance | models table', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.beforeEach(function () {\n      firstUser = server.createList('user', 10)[0];\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('route cells', async function (assert) {\n      await (0, _testHelpers.visit)('/examples/route-cells');\n      let firstCellLink = (0, _testHelpers.find)('tbody tr td a');\n      let secondCellLink = (0, _testHelpers.findAll)('tbody tr td')[1].querySelector('a');\n      assert.ok(firstCellLink.href.includes('/users/1'), 'ID. URL is valid');\n      assert.equal(firstCellLink.textContent.trim(), '1', 'ID. Link text is valid');\n      assert.ok(secondCellLink.href.includes('/users/1'), 'firstName. URL is valid');\n      assert.equal(secondCellLink.textContent.trim(), firstUser['first-name'], 'firstName. Link text is valid');\n    });\n    (0, _qunit.test)('A11y', async function (assert) {\n      await (0, _testHelpers.visit)('/examples/common-table');\n      await (0, _audit.default)('.models-table-wrapper');\n      assert.ok(true, 'no a11y errors found (1)');\n      await (0, _testHelpers.visit)('/examples/filtering');\n      await (0, _audit.default)('.models-table-wrapper');\n      assert.ok(true, 'no a11y errors found (2)');\n    });\n  });\n});","define(\"dummy/tests/helpers/destroy-app\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = destroyApp;\n\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define(\"dummy/tests/helpers/f\", [\"exports\", \"ember-cli-mirage\"], function (_exports, _emberCliMirage) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.generateContent = generateContent;\n  _exports.generateColumns = generateColumns;\n  _exports.lastNames = _exports.firstNames = void 0;\n\n  const firstNames = _emberCliMirage.faker.definitions.name.first_name.slice(0, 10).sort();\n\n  _exports.firstNames = firstNames;\n\n  const lastNames = _emberCliMirage.faker.definitions.name.last_name.slice(0, 10).sort();\n\n  _exports.lastNames = lastNames;\n  const {\n    random\n  } = _emberCliMirage.faker; // from http://stackoverflow.com/questions/14766951/convert-digits-into-words-with-javascript\n\n  function numberToWord(n) {\n    var a = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n    var b = ['', '', 'twenty', 'thirty', 'fourty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\n    var g = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion'];\n\n    var grp = function grp(n) {\n      return ('000' + n).substr(-3);\n    };\n\n    var rem = function rem(n) {\n      return n.substr(0, n.length - 3);\n    };\n\n    var fmt = function fmt(_ref) {\n      var h = _ref[0];\n      var t = _ref[1];\n      var o = _ref[2];\n      return [Number(h) === 0 ? '' : a[h] + ' hundred ', Number(o) === 0 ? b[t] : b[t] && b[t] + '-' || '', a[t + o] || a[o]].join('');\n    };\n\n    var cons = function cons(xs) {\n      return function (x) {\n        return function (g) {\n          return x ? [x, g && ' ' + g || '', ' ', xs].join('') : xs;\n        };\n      };\n    };\n\n    var iter = function iter(str) {\n      return function (i) {\n        return function (x) {\n          return function (r) {\n            if (x === '000' && r.length === 0) {\n              return str;\n            }\n\n            return iter(cons(str)(fmt(x))(g[i]))(i + 1)(grp(r))(rem(r));\n          };\n        };\n      };\n    };\n\n    return iter('')(0)(grp(String(n)))(rem(String(n))).trim();\n  }\n\n  function generateContent(length) {\n    const startFrom = arguments.length > 1 ? arguments[1] : 0;\n    const ret = Ember.A([]);\n\n    for (let i = startFrom; i < startFrom + length; i++) {\n      ret.pushObject(Ember.Object.create({\n        index: i,\n        nested: {\n          index: i\n        },\n        index2: Math.round(i / 2),\n        reversedIndex: startFrom + length - i,\n        indexWithHtml: `<i>${i}</i>`,\n        someWord: numberToWord(i),\n        id: i,\n        firstName: random.arrayElement(firstNames.slice(0, -2)),\n        lastName: random.arrayElement(lastNames.slice(0, -2)),\n        age: 11 + random.number(42),\n        rand: !!(i % 2)\n      }));\n    }\n\n    return ret;\n  }\n\n  function generateColumns(columnNames) {\n    return Ember.A(Ember.A(columnNames).map(columnName => {\n      return {\n        title: columnName,\n        propertyName: columnName\n      };\n    }));\n  }\n});","define(\"dummy/tests/helpers/get-page-object\", [\"exports\", \"dummy/tests/pages/models-table-bs\", \"dummy/tests/pages/models-table-bs4\", \"dummy/tests/pages/models-table-semanticui\"], function (_exports, _modelsTableBs, _modelsTableBs2, _modelsTableSemanticui) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  var _default = testContext => {\n    const uiFramework = Ember.get(testContext, 'owner.application.uiFramework') || 'bs3';\n    return {\n      bs3: _modelsTableBs.default,\n      bs4: _modelsTableBs2.default,\n      'semantic-ui': _modelsTableSemanticui.default\n    }[uiFramework] || _modelsTableBs.default;\n  };\n\n  _exports.default = _default;\n});","define(\"dummy/tests/helpers/get-theme-class\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  var _default = testContext => {\n    const owner = Ember.get(testContext, 'owner');\n    const uiFramework = Ember.get(owner, 'application.uiFramework') || 'bs3';\n    const lookup = owner.factoryFor ? 'factoryFor' : '_lookupFactory';\n    const bs3 = owner[lookup]('theme:bootstrap3');\n    const bs4 = owner[lookup]('theme:bootstrap4');\n    const semanticUi = owner[lookup]('theme:semanticui');\n    return {\n      bs3,\n      bs4,\n      'semantic-ui': semanticUi\n    }[uiFramework] || bs3;\n  };\n\n  _exports.default = _default;\n});","define(\"dummy/tests/helpers/module-for-acceptance\", [\"exports\", \"qunit\", \"dummy/tests/helpers/start-app\", \"dummy/tests/helpers/destroy-app\"], function (_exports, _qunit, _startApp, _destroyApp) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default(name, options = {}) {\n    (0, _qunit.module)(name, {\n      beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach() {\n        let afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(() => (0, _destroyApp.default)(this.application));\n      }\n\n    });\n  }\n});","define(\"dummy/tests/helpers/resolver\", [\"exports\", \"dummy/resolver\", \"dummy/config/environment\"], function (_exports, _resolver, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n  var _default = resolver;\n  _exports.default = _default;\n});","define(\"dummy/tests/helpers/start-app\", [\"exports\", \"dummy/app\", \"dummy/config/environment\"], function (_exports, _app, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = startApp;\n\n  function startApp(attrs) {\n    let attributes = Ember.assign({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.assign(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(() => {\n      let application = _app.default.create(attributes);\n\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define(\"dummy/tests/integration/components/models-table-server-paginated-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/initializers/ember-cli-mirage\", \"dummy/tests/helpers/f\", \"ember-a11y-testing/test-support/audit\", \"dummy/tests/pages/models-table-bs\", \"dummy/tests/pages/models-table-bs4\", \"dummy/tests/pages/models-table-semanticui\"], function (_qunit, _emberQunit, _testHelpers, _emberCliMirage, _f, _audit, _modelsTableBs, _modelsTableBs2, _modelsTableSemanticui) {\n  \"use strict\";\n\n  function fromTo(from, to) {\n    const ret = [];\n\n    for (let i = from; i <= to; i++) {\n      ret.push(`${i}`);\n    }\n\n    return ret;\n  }\n\n  (0, _qunit.module)('ModelsTableServerPaginated | Integration', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      const uiFramework = Ember.get(this, 'owner.application.uiFramework') || 'bs3';\n      this.ModelsTablePageObject = {\n        bs3: _modelsTableBs.default,\n        bs4: _modelsTableBs2.default,\n        'semantic-ui': _modelsTableSemanticui.default\n      }[uiFramework] || _modelsTableBs.default;\n      this.server = (0, _emberCliMirage.startMirage)();\n      this.server.createList('user', 100);\n      this.store = this.owner.lookup('service:store');\n      this.set('filterQueryParameters', {\n        globalFilter: 'globalSearch',\n        sort: 'sort',\n        sortDirection: 'sortDirection',\n        page: 'page',\n        pageSize: 'pageSize'\n      });\n      this.set('columns', (0, _f.generateColumns)(['index', 'firstName', 'lastName']));\n      return this.store.query('user', {}).then(d => this.data = d);\n    });\n    hooks.afterEach(function () {\n      this.server.shutdown();\n    });\n    (0, _qunit.test)('#summary is updated on page change', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 100 Clear all filters', 'Content for 1st page (10)');\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 11 - 20 of 100 Clear all filters', 'Content for 2nd page (10)');\n    });\n    (0, _qunit.test)('#summary is updated on page size change', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.changePageSize(25);\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 25 of 100 Clear all filters', 'Content for 1st page (25)');\n    });\n    (0, _qunit.test)('#summary is updated on global filter usage', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('100');\n      await (0, _testHelpers.settled)();\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 1 of 1 Clear all filters', 'Content for 1st page (1)');\n    });\n    (0, _qunit.test)('#summary is updated on column filter usage', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('100');\n      await (0, _testHelpers.settled)();\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 1 of 1 Clear all filters', 'Content for 1st page (1)');\n    });\n    (0, _qunit.test)('#navigation first and prev are disabled by default', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.ok(this.ModelsTablePageObject.navigation.goToPrevPageDisabled);\n      assert.ok(this.ModelsTablePageObject.navigation.goToFirstPageDisabled);\n    });\n    (0, _qunit.test)('#navigation next and last are disabled when user on the last page', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.navigation.goToLastPage();\n      assert.ok(this.ModelsTablePageObject.navigation.goToNextPageDisabled);\n      assert.ok(this.ModelsTablePageObject.navigation.goToLastPageDisabled);\n    });\n    (0, _qunit.test)('#navigation all buttons are enabled when user not on the last or first page', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.notOk(this.ModelsTablePageObject.navigation.goToNextPageDisabled);\n      assert.notOk(this.ModelsTablePageObject.navigation.goToLastPageDisabled);\n      assert.notOk(this.ModelsTablePageObject.navigation.goToPrevPageDisabled);\n      assert.notOk(this.ModelsTablePageObject.navigation.goToFirstPageDisabled);\n    });\n    (0, _qunit.test)('#content user may set custom page number to be shown initially', async function (assert) {\n      this.set('currentPageNumber', 5);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated \n            data=data\n            columns=columns\n            filterQueryParameters=filterQueryParameters\n            currentPageNumber=currentPageNumber}}\n      */\n      {\n        id: \"q+taCMZ6\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\",\\\"currentPageNumber\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]],[24,[\\\"currentPageNumber\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 41 - 50 of 100 Clear all filters');\n    });\n    (0, _qunit.test)('#pageSize changes shown rows count', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), fromTo(1, 10));\n      await this.ModelsTablePageObject.changePageSize(25);\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), fromTo(1, 25));\n    });\n    (0, _qunit.test)('#globalFilter causes data filtering', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter(10);\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['10', '100']);\n    });\n    (0, _qunit.test)('#pageSize and #currentPageNumber may be set on component init', async function (assert) {\n      this.set('pageSize', 25);\n      this.set('currentPageNumber', 2);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated \n            data=data\n            columns=columns\n            filterQueryParameters=filterQueryParameters\n            pageSize=pageSize\n            currentPageNumber=currentPageNumber\n          }}\n      */\n      {\n        id: \"eWh2P8Fd\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\",\\\"pageSize\\\",\\\"currentPageNumber\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]],[24,[\\\"pageSize\\\"]],[24,[\\\"currentPageNumber\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 26 - 50 of 100 Clear all filters');\n    });\n    (0, _qunit.test)('#columnFilter causes data filtering by `propertyName', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter(10);\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['10', '100']);\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter(this.server.db.users[9]['first-name']);\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['10']);\n    });\n    (0, _qunit.test)('#columnFilter causes data filtering by `filteredBy`', async function (assert) {\n      this.set('columns.1.filteredBy', 'index');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter(this.server.db.users[10]['index']);\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), [this.server.db.users[10]['first-name']]);\n    });\n    (0, _qunit.test)('#columnFilter with predefined options causes data filtering by `propertyName`', async function (assert) {\n      this.set('columns.firstObject.filterWithSelect', true);\n      this.set('columns.firstObject.predefinedFilterOptions', ['10', '20', '30']);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).selectFilter('10');\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['10', '100']);\n    });\n    (0, _qunit.test)('#columnFilter with predefined options causes data filtering by `filteredBy`', async function (assert) {\n      this.set('columns.1.filterWithSelect', true);\n      this.set('columns.1.predefinedFilterOptions', ['10', '20', '30']);\n      this.set('columns.1.filteredBy', 'index');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('10');\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['10', '100']);\n    });\n    (0, _qunit.test)('#sortColumn sort data by `propertyName`', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), this.server.db.users.map(u => u['first-name']).sort().slice(0, 10));\n    });\n    (0, _qunit.test)('#sortColumn sort data by `sortedBy`', async function (assert) {\n      this.set('columns.1.sortedBy', 'lastName');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), this.server.db.users.sort((a, b) => a['last-name'] > b['last-name'] ? 1 : -1).map(u => u['first-name']).slice(0, 10));\n    });\n    (0, _qunit.test)('#sort by single column', async function (assert) {\n      this.server.get('/users', (schema, req) => {\n        assert.deepEqual(req.queryParams, {\n          page: '1',\n          pageSize: '10',\n          sort: 'firstName',\n          sortDirection: 'ASC'\n        }, 'correct query parameters are sent');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n    });\n    (0, _qunit.test)('#sort by multiple columns', async function (assert) {\n      const expectedQp = [{\n        page: '1',\n        pageSize: '10',\n        sort: 'firstName'\n      }, {\n        page: '1',\n        pageSize: '10',\n        sort: 'firstName,lastName'\n      }, {\n        page: '1',\n        pageSize: '10',\n        sort: 'firstName,-lastName'\n      }];\n      let index = 0;\n      this.server.get('/users', (schema, req) => {\n        assert.deepEqual(req.queryParams, expectedQp[index], `correct query parameters are sent (${index})`);\n        index++;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters multipleColumnsSorting=true}}\n      */\n      {\n        id: \"uiqE1D7F\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\",\\\"multipleColumnsSorting\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      await this.ModelsTablePageObject.sorting.objectAt(2).click();\n      await this.ModelsTablePageObject.sorting.objectAt(2).click();\n    });\n    (0, _qunit.test)('A11y', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].filterWithSelect = true;\n      const data = (0, _f.generateContent)(10);\n      this.setProperties({\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}\n      */\n      {\n        id: \"K7X4VqNf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table-server-paginated\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"filterQueryParameters\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"filterQueryParameters\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await (0, _audit.default)('.models-table-wrapper');\n      assert.ok(true, 'no a11y errors found');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table-test\", [\"ember-data\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-a11y-testing/test-support/audit\", \"dummy/tests/helpers/f\", \"dummy/tests/helpers/get-page-object\", \"dummy/tests/helpers/get-theme-class\"], function (_emberData, _qunit, _emberQunit, _testHelpers, _audit, _f, _getPageObject, _getThemeClass) {\n  \"use strict\";\n\n  const oneTenArray = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\n  const oneTenArrayDig = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  const tenOneArrayDig = oneTenArrayDig.slice().reverse();\n  const oneTenAscArray = ['eight', 'five', 'four', 'nine', 'one', 'seven', 'six', 'ten', 'three', 'two'];\n  const oneTenDescArray = ['two', 'three', 'ten', 'six', 'seven', 'one', 'nine', 'four', 'five', 'eight'];\n  (0, _qunit.module)('ModelsTable | Integration', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.actions = {};\n\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n\n      this.ModelsTablePageObject = (0, _getPageObject.default)(this);\n    });\n\n    function signFilter(cellValue, neededString) {\n      const signs = ['<', '>', '='];\n      let neededNumber = neededString;\n      let sign = '=';\n\n      if (-1 !== signs.indexOf(neededString[0])) {\n        sign = neededString[0];\n        neededNumber = parseInt(neededString.substring(1), 10);\n      }\n\n      let _cellValue = parseInt(cellValue, 10);\n\n      if ('=' === sign) {\n        return _cellValue === neededNumber;\n      }\n\n      if ('>' === sign) {\n        return _cellValue > neededNumber;\n      }\n\n      if ('<' === sign) {\n        return _cellValue < neededNumber;\n      }\n\n      return cellValue === neededNumber;\n    }\n\n    (0, _qunit.test)('summary', async function (assert) {\n      this.setProperties({\n        data: Ember.A([]),\n        columns: (0, _f.generateColumns)(['index'])\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 0 - 0 of 0 Clear all filters', 'Empty content');\n      this.set('data', (0, _f.generateContent)(10));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 10 Clear all filters', 'Content for 1 page');\n      this.set('data', (0, _f.generateContent)(15));\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 11 - 15 of 15 Clear all filters', 'Content for 2 pages. Last page selected');\n      this.set('data', (0, _f.generateContent)(35));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 11 - 20 of 35 Clear all filters', 'Content for 4 pages. Middle page selected');\n    });\n    (0, _qunit.test)('basic render', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.tablesCount, 1, 'Table exists');\n      assert.equal(this.ModelsTablePageObject.rows.length, 10, 'Table has 10 rows');\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 10 Clear all filters', 'Summary is valid');\n      assert.equal(this.ModelsTablePageObject.navigation.disabledNavigationLinksCount, 4, 'All navigation buttons are disabled');\n      assert.equal(this.ModelsTablePageObject.footer.isVisible, false, 'Table footer not exists, if there is no footer-components');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Content is valid');\n    });\n    (0, _qunit.test)('basic render with data update', async function (assert) {\n      this.set('data', (0, _f.generateContent)(10, 1));\n      this.set('columns', (0, _f.generateColumns)(['index', 'reversedIndex']));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.tablesCount, 1, 'Table exists');\n      assert.equal(this.ModelsTablePageObject.rows.length, 10, 'Table has 10 rows');\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 10 Clear all filters', 'Summary is valid');\n      assert.equal(this.ModelsTablePageObject.navigation.disabledNavigationLinksCount, 4, 'All navigation buttons are disabled');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Content is valid');\n      this.set('data.0.index', 11);\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['11', '2', '3', '4', '5', '6', '7', '8', '9', '10'], 'Content is valid after update');\n      this.set('data.firstObject.index', 12);\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['12', '2', '3', '4', '5', '6', '7', '8', '9', '10'], 'Content is valid after second update');\n    });\n    (0, _qunit.test)('render without footer', async function (assert) {\n      this.set('showComponentFooter', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table showComponentFooter=showComponentFooter}}\n      */\n      {\n        id: \"ZM5O4QNj\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"showComponentFooter\\\"],[[24,[\\\"showComponentFooter\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.tableFooterCount, 0, 'table footer isn\\'t rendered');\n    });\n    (0, _qunit.test)('pageSizeObserver', async function (assert) {\n      this.set('data', (0, _f.generateContent)(50, 1));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data}}\n      */\n      {\n        id: \"lDvF784e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\"],[[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 50 Clear all filters', 'init value');\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 11 - 20 of 50 Clear all filters', 'value changed by user');\n      await this.ModelsTablePageObject.changePageSize(25);\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 25 of 50 Clear all filters', 'value restored to 1');\n    });\n    (0, _qunit.test)('visibleContent', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index']),\n        data: (0, _f.generateContent)(10),\n        pageSize: 10,\n        currentPageNumber: 1\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data currentPageNumber=currentPageNumber pageSize=pageSize columns=columns}}\n      */\n      {\n        id: \"7I1oQVvH\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"currentPageNumber\\\",\\\"pageSize\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"currentPageNumber\\\"]],[24,[\\\"pageSize\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), (0, _f.generateContent)(10).mapBy('index').map(c => `${c}`), 'One page');\n      this.setProperties({\n        data: (0, _f.generateContent)(25, 1),\n        currentPageNumber: 2\n      });\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), (0, _f.generateContent)(10, 11).mapBy('index').map(c => `${c}`), 'Second page');\n      this.setProperties({\n        data: (0, _f.generateContent)(25, 1),\n        currentPageNumber: 1,\n        pageSize: 50\n      });\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), (0, _f.generateContent)(25, 1).mapBy('index').map(c => `${c}`), 'One big page');\n      this.setProperties({\n        data: (0, _f.generateContent)(25, 1),\n        currentPageNumber: 1,\n        pageSize: 10\n      });\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), (0, _f.generateContent)(5, 21).mapBy('index').map(c => `${c}`), 'Last page');\n    });\n    (0, _qunit.test)('visibleContent with page size changing and pagination', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(1000, 1),\n        columns: (0, _f.generateColumns)(['index'])\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.changePageSize(25);\n      assert.equal(this.ModelsTablePageObject.rows.length, 25, '1st page has 25 rows');\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.equal(this.ModelsTablePageObject.rows.length, 25, '2nd page has 25 rows');\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.equal(this.ModelsTablePageObject.rows.length, 25, '3rd page has 25 rows');\n    });\n    (0, _qunit.test)('sorting by nested properties', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(100, 1),\n        columns: (0, _f.generateColumns)(['nested.index'])\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Content is valid after sorting');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['100', '99', '98', '97', '96', '95', '94', '93', '92', '91'], 'Content is valid after sorting (2)');\n    });\n    (0, _qunit.test)('gotoBackEnabled', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(25, 1),\n        columns: (0, _f.generateColumns)(['index'])\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.ok(this.ModelsTablePageObject.navigation.goToPrevPageDisabled, 'Disabled, if user is on the 1st page');\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.notOk(this.ModelsTablePageObject.navigation.goToPrevPageDisabled, 'Enabled, if user isn\\'t on the 1st page');\n    });\n    (0, _qunit.test)('gotoForwardEnabled', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(10),\n        columns: (0, _f.generateColumns)(['id'])\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.ok(this.ModelsTablePageObject.navigation.goToNextPageDisabled, 'One page only');\n      this.set('data', (0, _f.generateContent)(11));\n      assert.notOk(this.ModelsTablePageObject.navigation.goToNextPageDisabled, 'One page + 1 record more');\n      this.setProperties({\n        data: (0, _f.generateContent)(25)\n      });\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.ok(this.ModelsTablePageObject.navigation.goToNextPageDisabled, 'Three pages, last one selected');\n    });\n    (0, _qunit.test)('#345 work with select for page number', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(100),\n        columns: (0, _f.generateColumns)(['id']),\n        showCurrentPageNumberSelect: true,\n        useNumericPagination: false\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table \n            data=data \n            columns=columns\n            showCurrentPageNumberSelect=showCurrentPageNumberSelect\n            useNumericPagination=useNumericPagination\n          }}\n      */\n      {\n        id: \"qDmeyJZo\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"showCurrentPageNumberSelect\\\",\\\"useNumericPagination\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"showCurrentPageNumberSelect\\\"]],[24,[\\\"useNumericPagination\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.ok(this.ModelsTablePageObject.navigation.selectPageNumberExists, 'Select for current page number is shown by default for simple pagination');\n      assert.equal(this.ModelsTablePageObject.navigation.selectedPageNumber, '1', 'First page is selected');\n      this.set('useNumericPagination', true);\n      assert.ok(this.ModelsTablePageObject.navigation.selectPageNumberExists, 'Select for current page number is shown by default for numeric pagination');\n      assert.equal(this.ModelsTablePageObject.navigation.selectedPageNumber, '1', 'First page is selected');\n      this.set('useNumericPagination', false);\n      await this.ModelsTablePageObject.navigation.selectPageNumber(4);\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 31 - 40 of 100 Clear all filters', 'Summary is shown for 4th page');\n      await this.ModelsTablePageObject.navigation.goToLastPage();\n      assert.equal(this.ModelsTablePageObject.navigation.selectedPageNumber, '10', 'Last page is selected');\n      await this.ModelsTablePageObject.changePageSize(25);\n      assert.equal(this.ModelsTablePageObject.navigation.selectedPageNumber, '1', 'First page is selected after page size is changed');\n      this.set('showCurrentPageNumberSelect', false);\n      assert.notOk(this.ModelsTablePageObject.navigation.selectPageNumberExists, 'Select for current page number is hidden for simple pagination');\n      this.set('useNumericPagination', true);\n      assert.notOk(this.ModelsTablePageObject.navigation.selectPageNumberExists, 'Select for current page number is hidden for numeric pagination');\n    });\n    (0, _qunit.test)('#374 Disable page-number select if there are no options for it', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(100),\n        columns: (0, _f.generateColumns)(['id']),\n        showCurrentPageNumberSelect: true,\n        useNumericPagination: false\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table \n            data=data \n            columns=columns\n            showCurrentPageNumberSelect=showCurrentPageNumberSelect\n            useNumericPagination=useNumericPagination\n          }}\n      */\n      {\n        id: \"qDmeyJZo\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"showCurrentPageNumberSelect\\\",\\\"useNumericPagination\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"showCurrentPageNumberSelect\\\"]],[24,[\\\"useNumericPagination\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('any random text that does not exist im the table');\n      assert.ok(this.ModelsTablePageObject.navigation.selectPageNumberDisabled, 'disabled with simple pagination');\n      this.set('useNumericPagination', true);\n      assert.ok(this.ModelsTablePageObject.navigation.selectPageNumberDisabled, 'disabled with numeric pagination');\n    });\n    (0, _qunit.test)('render multi-pages table', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(20, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.notOk(this.ModelsTablePageObject.navigation.goToNextPageDisabled, 'next enabled');\n      assert.notOk(this.ModelsTablePageObject.navigation.goToLastPageDisabled, 'last enabled');\n      assert.ok(this.ModelsTablePageObject.navigation.goToPrevPageDisabled, 'prev disabled');\n      assert.ok(this.ModelsTablePageObject.navigation.goToFirstPageDisabled, 'first disabled');\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 20 Clear all filters', 'Summary is valid');\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20'], 'Content is valid');\n      assert.ok(this.ModelsTablePageObject.navigation.goToNextPageDisabled, 'next disabled');\n      assert.ok(this.ModelsTablePageObject.navigation.goToLastPageDisabled, 'last disabled');\n      assert.notOk(this.ModelsTablePageObject.navigation.goToPrevPageDisabled, 'prev enabled');\n      assert.notOk(this.ModelsTablePageObject.navigation.goToFirstPageDisabled, 'first enabled');\n    });\n    (0, _qunit.test)('render custom component in the table cell', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].component = 'cell-component';\n      this.setProperties({\n        data: (0, _f.generateContent)(20, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArray, 'Content is valid');\n    });\n    (0, _qunit.test)('render custom component in the table cell as a composable component', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].component = 'cellComp';\n      this.setProperties({\n        data: (0, _f.generateContent)(20, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnComponents=(hash cellComp=(component \"cell-component\"))}}\n      */\n      {\n        id: \"GukKaxw/\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnComponents\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"hash\\\",null,[[\\\"cellComp\\\"],[[28,\\\"component\\\",[\\\"cell-component\\\"],null]]]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArray, 'Content is valid');\n    });\n    (0, _qunit.test)('render custom component (input) in the filter cell', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].componentForFilterCell = 'filter-cell-input';\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArray, 'Content is valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('one');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['one'], 'Content is filtered');\n      await this.ModelsTablePageObject.filters.objectAt(1).clearFilter();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArray, 'Content is restored');\n    });\n    (0, _qunit.test)('render custom component (select) in the filter cell', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].componentForFilterCell = 'filter-cell-select';\n\n      if (Ember.get(this, 'owner.application.uiFramework') === 'semantic-ui') {\n        columns[1].componentForFilterCell = 'themes/ember-semanticui/filter-cell-select';\n      }\n\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, ['', ...oneTenArray], 'Filter options are correct');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArray, 'Content is valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['one'], 'Content is filtered');\n      await this.ModelsTablePageObject.filters.objectAt(1).clearFilter();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArray, 'Content is restored');\n    });\n    (0, _qunit.test)('render custom component in the sort cell', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].componentForSortCell = 'sort-cell';\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data multipleColumnsSorting=false}}\n      */\n      {\n        id: \"/UMqb4C6\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"multipleColumnsSorting\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenAscArray, 'Content is valid (sorting 2nd column asc)');\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenDescArray, 'Content is valid (sorting 2nd column desc)');\n    });\n    (0, _qunit.test)('custom cell component should prevent filtering and sorting if propertyName and sortedBy/filteredBy not provided', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].component = 'cell-component';\n      delete columns[1].propertyName;\n      delete columns[1].filteredBy;\n      this.setProperties({\n        data: (0, _f.generateContent)(20, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).content, '', 'Filter-cell is empty');\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.notOk(this.ModelsTablePageObject.sorting.objectAt(1).hasSortMarker, 'Not sorted');\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.notOk(this.ModelsTablePageObject.sorting.objectAt(1).hasSortMarker, 'Not sorted again');\n    });\n    (0, _qunit.test)('render show/hide columns', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.sorting.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, '2 columns are shown (tbody)');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 1, '1 column is shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 1, '1 column is shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, '1 column is shown (tbody)');\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['reversedIndex'], 'Valid column is shown (thead)');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.firstColumnIconSelector).className.includes(this.ModelsTablePageObject.uncheckedIconClass), true, 'First column is unchecked');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.secondColumnIconSelector).className.includes(this.ModelsTablePageObject.checkedIconClass), true, 'Second column is checked');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 2, '2 columns are shown (tbody)');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.firstColumnIconSelector).className.includes(this.ModelsTablePageObject.checkedIconClass), true, 'First column is checked');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.secondColumnIconSelector).className.includes(this.ModelsTablePageObject.checkedIconClass), true, 'Second column is checked');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(4).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 1, '1 column is shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 1, '1 column is shown (tbody)');\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index'], 'Valid column is shown (thead)');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.firstColumnIconSelector).className.includes(this.ModelsTablePageObject.checkedIconClass), true, 'First column is checked');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.secondColumnIconSelector).className.includes(this.ModelsTablePageObject.uncheckedIconClass), true, 'Second column is unchecked');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, '1 row is shown when all columns are hidden');\n      assert.equal(this.ModelsTablePageObject.getCellsCount(), 1, 'with 1 cell');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['All columns are hidden. Use columns-dropdown to show some of them'], 'correct message is shown');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.firstColumnIconSelector).className.includes(this.ModelsTablePageObject.uncheckedIconClass), true, 'First column is unchecked');\n      assert.equal(this.element.querySelector(this.ModelsTablePageObject.secondColumnIconSelector).className.includes(this.ModelsTablePageObject.uncheckedIconClass), true, 'Second column is unchecked');\n    });\n    (0, _qunit.test)('render show/hide all columns', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.sorting.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, '2 columns are shown (tbody)');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, '1 row is shown when all columns are hidden');\n      assert.equal(this.ModelsTablePageObject.getCellsCount(), 1, 'with 1 cell');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['All columns are hidden. Use columns-dropdown to show some of them'], 'correct message is shown');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(0).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 2, '2 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, '2 columns are shown (tbody)');\n    });\n    (0, _qunit.test)('render columns-dropdown with mayBeHidden = false for some columns', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].mayBeHidden = false;\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      assert.deepEqual(this.ModelsTablePageObject.columnsDropDown.mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'reversedIndex'], 'Column with mayBeHidden = false is not shown in the columns dropdown');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 1, '1 column are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 1, '1 column are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, '1 column are shown (tbody)');\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index'], 'Valid column is shown (thead)');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 2, '2 columns are shown (thead)');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      assert.equal(this.ModelsTablePageObject.sorting.length, 1, '1 column are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 1, '1 column are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, '1 column are shown (tbody)');\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index'], 'Valid column is shown (thead)');\n    });\n    (0, _qunit.test)('render columnSets in columns-dropdown', async function (assert) {\n      let customFunctionCalled = null;\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'index2', 'reversedIndex', 'id']),\n        data: (0, _f.generateContent)(10, 1),\n        columnSets: [{\n          label: 'Set 1',\n          showColumns: ['index', 'id']\n        }, {\n          label: 'Set 2',\n          showColumns: ['index', 'id'],\n          hideOtherColumns: false\n        }, {\n          label: 'Set 3',\n          showColumns: ['index', 'id'],\n          toggleSet: true\n        }, {\n          label: 'Set 4',\n\n          showColumns(columns) {\n            customFunctionCalled = columns;\n          }\n\n        }]\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnSets=columnSets}}\n      */\n      {\n        id: \"TwceAz95\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnSets\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"columnSets\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.sorting.length, 4, '4 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.filters.length, 4, '4 columns are shown (thead)');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 4, '4 columns are shown (tbody)');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, '2 columns are shown for default settings');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, '2 columns are still shown after repeated click');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(0).click();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, 'other columns are hidden if hideOtherColumns=true');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(0).click();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(7).click(); // This is the first regular column\n\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(4).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 4, 'other columns are not hidden if hideOtherColumns=false');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(4).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 4, 'columns remain visible after repeated click with hideOtherColumns=false');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(5).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 2, 'columns are hidden if toggleSet=true and both columns are visible');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(5).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 4, 'columns are shown if toggleSet=true and both columns are hidden');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(7).click(); // This is the first regular column\n\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(5).click();\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 4, 'columns are shown if toggleSet=true and one of them is hidden');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(6).click();\n      assert.ok(customFunctionCalled, 'custom function is called if showColumns is a function');\n      assert.deepEqual(customFunctionCalled.mapBy('propertyName'), ['index', 'index2', 'reversedIndex', 'id'], 'custom function gets columns as argument');\n    });\n    (0, _qunit.test)('global filter and current page may be set on component init', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(1000, 1),\n        filterString: '1'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns currentPageNumber=2 filterString=filterString}}\n      */\n      {\n        id: \"c+38mxx3\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"currentPageNumber\\\",\\\"filterString\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],2,[24,[\\\"filterString\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 11 - 20 of 488 Clear all filters');\n    });\n    (0, _qunit.test)('global filter focused if label is clicked', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.clickGlobalFilterLabel();\n      assert.ok(this.ModelsTablePageObject.globalFilterFocused);\n    });\n    (0, _qunit.test)('page size and current page may be set on component init', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(100, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns currentPageNumber=2 pageSize=25}}\n      */\n      {\n        id: \"Kza0lsWb\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"currentPageNumber\\\",\\\"pageSize\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],2,25]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 26 - 50 of 100 Clear all filters');\n    });\n    (0, _qunit.test)('global filtering (ignore case OFF)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('1');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1', '10'], 'Content is filtered correctly');\n      await this.ModelsTablePageObject.doGlobalFilter('');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Filter is empty and All rows are shown');\n      await this.ModelsTablePageObject.doGlobalFilter('invalid input');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).getCellColspans(), columns.length, 'cell with message has correct colspan');\n    });\n    (0, _qunit.test)('global filtering (ignore case ON)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      this.setProperties({\n        filteringIgnoreCase: true,\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data filteringIgnoreCase=filteringIgnoreCase}}\n      */\n      {\n        id: \"K1/eMCQ7\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"filteringIgnoreCase\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"filteringIgnoreCase\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('One');\n      assert.deepEqual(this.ModelsTablePageObject.rows.objectAt(0).cells.mapBy('content'), ['1', 'one'], 'Content is filtered correctly');\n      await this.ModelsTablePageObject.doGlobalFilter('');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Filter is empty and All rows are shown');\n      await this.ModelsTablePageObject.doGlobalFilter('invalid input');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).getCellColspans(), columns.length, 'cell with message has correct colspan');\n      await this.ModelsTablePageObject.doGlobalFilter('');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.doGlobalFilter('One');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['one'], 'Content is filtered correctly when sorting is not done');\n    });\n    (0, _qunit.test)('filtering by columns (labels)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].filterWithSelect = true;\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1),\n        useFilteringByColumns: true\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}\n      */\n      {\n        id: \"wTQPatVN\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useFilteringByColumns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"useFilteringByColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(0).label, columns[0].title);\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).label, columns[1].title);\n    });\n    (0, _qunit.test)('filtering by columns (ignore case OFF)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].filterPlaceholder = 'custom placeholder';\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1),\n        useFilteringByColumns: true\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}\n      */\n      {\n        id: \"wTQPatVN\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useFilteringByColumns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"useFilteringByColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('1');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1', '10'], 'Content is filtered correctly');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Filter is empty and All rows are shown');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('invalid input');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).getCellColspans(), columns.length, 'cell with message has correct colspan');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(0).inputPlaceholder, 'custom placeholder', 'Placeholder is correct');\n      this.set('useFilteringByColumns', false);\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Filtering by columns is ignored');\n      assert.equal(this.element.querySelectorAll('thead input').length, 0, 'Columns filters are hidden');\n    });\n    (0, _qunit.test)('filtering by columns (ignore case ON)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      this.setProperties({\n        filteringIgnoreCase: true,\n        useFilteringByColumns: true,\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table filteringIgnoreCase=filteringIgnoreCase columns=columns data=data useFilteringByColumns=useFilteringByColumns}}\n      */\n      {\n        id: \"5bZTGzu/\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"filteringIgnoreCase\\\",\\\"columns\\\",\\\"data\\\",\\\"useFilteringByColumns\\\"],[[24,[\\\"filteringIgnoreCase\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"useFilteringByColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('One');\n      assert.deepEqual(this.ModelsTablePageObject.rows.objectAt(0).cells.mapBy('content'), ['1', 'one'], 'Content is filtered correctly');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Filter is empty and All rows are shown');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('invalid input');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).getCellColspans(), columns.length, 'cell with message has correct colspan');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('One');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['one'], 'Content is filtered correctly when sorting is not done');\n      this.set('useFilteringByColumns', false);\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Filtering by columns is ignored');\n      assert.equal(this.ModelsTablePageObject.filters.length, 0, 'Columns filters are hidden');\n    });\n    (0, _qunit.test)('filtering by columns with custom functions', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[0].filterFunction = signFilter;\n      this.setProperties({\n        useFilteringByColumns: true,\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data useFilteringByColumns=useFilteringByColumns}}\n      */\n      {\n        id: \"pPutvJv1\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"useFilteringByColumns\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"useFilteringByColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('=1');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1'], 'Content is filtered correctly (with \"=1\")');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('>5');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['6', '7', '8', '9', '10'], 'Content is filtered correctly (with \">5\")');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('<6');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1', '2', '3', '4', '5'], 'Content is filtered correctly (with \"<6\")');\n    });\n    (0, _qunit.test)('filtering by columns with custom functions and predefined filter options', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[0].filterFunction = signFilter;\n      columns[0].filterWithSelect = true;\n      columns[0].predefinedFilterOptions = ['=1', '>5', '<6'];\n      this.setProperties({\n        useFilteringByColumns: true,\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data useFilteringByColumns=useFilteringByColumns}}\n      */\n      {\n        id: \"pPutvJv1\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"useFilteringByColumns\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"useFilteringByColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).selectFilter('=1');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1'], 'Content is filtered correctly (with \"=1\")');\n      await this.ModelsTablePageObject.filters.objectAt(0).selectFilter('>5');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['6', '7', '8', '9', '10'], 'Content is filtered correctly (with \">5\")');\n      await this.ModelsTablePageObject.filters.objectAt(0).selectFilter('<6');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1', '2', '3', '4', '5'], 'Content is filtered correctly (with \"<6\")');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (without predefinedFilterOptions)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      const data = (0, _f.generateContent)(10, 1);\n      data[data.length - 1].someWord = '';\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectOptions.length, 10, 'Empty data-value was excluded');\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, ['', ...data.mapBy('someWord').slice(0, -1)], 'Options for select are valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Only one row exist after filtering');\n      this.set('data.firstObject.someWord', 'not a number');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectValue, '', 'Filter is reverted to the default value');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('');\n      assert.equal(this.ModelsTablePageObject.rows.length, 10, 'All rows are shown after clear filter');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (without predefinedFilterOptions), `sortFilterOptions` is true', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      columns[1].sortFilterOptions = true;\n      const data = (0, _f.generateContent)(10, 1);\n      data[data.length - 1].someWord = '';\n      const words = data.mapBy('someWord').sort();\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, words, 'Options for select are valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Only one row exist after filtering');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (without predefinedFilterOptions), sort by property with boolean values', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'rand']);\n      columns[1].filterWithSelect = true;\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 10, '10 rows exist before filtering');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('true');\n      assert.equal(this.ModelsTablePageObject.rows.length, 5, '5 rows exist after filtering');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['true', 'true', 'true', 'true', 'true'], 'valid rows are shown');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('false');\n      assert.equal(this.ModelsTablePageObject.rows.length, 5, '5 rows exist after filtering (2)');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['false', 'false', 'false', 'false', 'false'], 'valid rows are shown (2)');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (with predefinedFilterOptions as primitives)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      columns[1].predefinedFilterOptions = ['one', 'two'];\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, ['', 'one', 'two'], 'Options for select are valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectValue, 'one', 'Proper option is selected');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Only one row exist after filtering');\n      this.set('data', (0, _f.generateContent)(9, 2));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectValue, 'one', 'Filter is not reverted to the default value');\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, ['', 'one', 'two'], 'Options for select are valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('');\n      assert.equal(this.ModelsTablePageObject.rows.length, 9, 'All rows are shown after clear filter');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (with predefinedFilterOptions as objects)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      columns[1].predefinedFilterOptions = [{\n        label: '1',\n        value: 'one'\n      }, {\n        label: '2',\n        value: 'two'\n      }];\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, ['', '1', '2'], 'Options for select are valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectValue, 'one', 'Proper option is selected');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Only one row exist after filtering');\n      this.set('data', (0, _f.generateContent)(9, 2));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectValue, 'one', 'Filter is not reverted to the default value');\n      assert.deepEqual(this.ModelsTablePageObject.filters.objectAt(1).selectOptions, ['', '1', '2'], 'Options for select are valid');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('');\n      assert.equal(this.ModelsTablePageObject.rows.length, 9, 'All rows are shown after clear filter');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (with predefinedFilterOptions as empty array)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      columns[1].predefinedFilterOptions = [];\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.notOk(this.ModelsTablePageObject.filters.objectAt(1).selectFilterExists, 'Select-box for column with `filterWithSelect` does not exist if empty predefinedFilterOptions are given');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (with predefinedFilterOptions). `filterPlaceholder` is used', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      columns[1].filterPlaceholder = 'placeholder';\n      columns[1].predefinedFilterOptions = [{\n        label: '1',\n        value: 'one'\n      }, {\n        label: '2',\n        value: 'two'\n      }];\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectPlaceholder, 'placeholder');\n    });\n    (0, _qunit.test)('filtering with filterWithSelect (without predefinedFilterOptions). `filterPlaceholder` is used', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      columns[1].filterPlaceholder = 'placeholder';\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).selectPlaceholder, 'placeholder');\n    });\n    (0, _qunit.test)('filtering with `filteredBy`', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'index']);\n      delete columns[0].propertyName;\n      columns[0].filteredBy = 'index';\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1),\n        useFilteringByColumns: true\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}\n      */\n      {\n        id: \"wTQPatVN\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useFilteringByColumns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"useFilteringByColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('1');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['1', '10'], 'Content is filtered correctly');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArrayDig, 'Filter is empty and All rows are shown');\n    });\n    (0, _qunit.test)('`filteredBy` has higher priority than `propertyName`', async function (assert) {\n      const columns = (0, _f.generateColumns)(['someWord']);\n      columns[0].filteredBy = 'index';\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('2');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['two'], 'Content is filtered correctly (global filter)');\n      await this.ModelsTablePageObject.doGlobalFilter('');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('2');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['two'], 'Content is filtered correctly (filter by column)');\n    });\n    (0, _qunit.test)('clear filters using icons', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].filterWithSelect = true;\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        columns,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter(2);\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Global filter is used');\n      await this.ModelsTablePageObject.clearGlobalFilter();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'Global filter is clear (1)');\n      await this.ModelsTablePageObject.doGlobalFilter(2);\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Global filter is used');\n      await this.ModelsTablePageObject.clearAllFilters();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'Global filter is clear (2)');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter(2);\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Filter for first column is used');\n      await this.ModelsTablePageObject.clearAllFilters();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'Filter for first column is clear (1)');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter(2);\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Filter for first column is used');\n      await this.ModelsTablePageObject.clearAllFilters();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'Filter for first column is clear (2)');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Filter for second column is used');\n      await this.ModelsTablePageObject.filters.objectAt(1).clearFilter();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'Filter for second column is clear (1)');\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('one');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'Filter for second column is used');\n      await this.ModelsTablePageObject.clearAllFilters();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'Filter for second column is clear (2)');\n      this.ModelsTablePageObject.doGlobalFilter(2);\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter(2);\n      await this.ModelsTablePageObject.filters.objectAt(1).selectFilter('two');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, 'All filters are used, 1 row shown');\n      await this.ModelsTablePageObject.clearAllFilters();\n      assert.equal(this.ModelsTablePageObject.rows.length, data.length, 'All filters are clear');\n    });\n    (0, _qunit.test)('all custom messages', async function (assert) {\n      const messages = {\n        searchLabel: 'Se@rch:',\n        'columns-title': 'ColumnZ',\n        'columns-showAll': 'Show Me All!',\n        'columns-hideAll': 'Hide All!',\n        'columns-restoreDefaults': 'Restore My Columns',\n        tableSummary: 'Now are showing %@ - %@ of %@',\n        allColumnsAreHidden: 'No visible columns, dude!',\n        noDataToShow: 'No data. Sorry, bro...',\n        editRowButtonLabel: 'Ed1t',\n        saveRowButtonLabel: 'S@ve',\n        cancelRowButtonLabel: 'Canc3l'\n      };\n      const messages2 = {\n        searchLabel: 'SEARCH',\n        'columns-title': 'COLUMNS',\n        'columns-showAll': 'SHOW All',\n        'columns-hideAll': 'HIDE ALL',\n        'columns-restoreDefaults': 'RESTORE MY COLUMNS',\n        tableSummary: 'DISPLAY %@ - %@ OF %@',\n        allColumnsAreHidden: 'NO COLUMNS',\n        noDataToShow: 'NO DATA',\n        editRowButtonLabel: 'EDIT',\n        saveRowButtonLabel: 'SAVE',\n        cancelRowButtonLabel: 'CANCEL'\n      };\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1),\n        themeInstance: (0, _getThemeClass.default)(this).create({\n          messages\n        })\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns themeInstance=themeInstance}}\n      */\n      {\n        id: \"YO/pccLz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"themeInstance\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"themeInstance\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Now are showing 1 - 10 of 10 Clear all filters', 'Summary is valid');\n      assert.equal(this.ModelsTablePageObject.columnsDropdownLabel, messages['columns-title'], 'Columns-dropdown title is valid');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      assert.equal(this.ModelsTablePageObject.columnsDropDown.objectAt(0).label, messages['columns-showAll'], 'Columns-dropdown \"showAll\" is valid');\n      assert.equal(this.ModelsTablePageObject.columnsDropDown.objectAt(1).label, messages['columns-hideAll'], 'Columns-dropdown \"hideAll\" is valid');\n      assert.equal(this.ModelsTablePageObject.columnsDropDown.objectAt(2).label, messages['columns-restoreDefaults'], 'Columns-dropdown \"restoreDefaults\" is valid');\n      assert.equal(this.ModelsTablePageObject.globalFilterLabel, messages.searchLabel, 'Global-search label is valid');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), [messages.allColumnsAreHidden], 'Message about all hidden columns is valid');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(0).click();\n      await this.ModelsTablePageObject.doGlobalFilter('invalid string');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), [messages.noDataToShow], 'Message about no data is valid');\n      this.set('themeInstance.messages', messages2);\n      await this.ModelsTablePageObject.doGlobalFilter('');\n      assert.equal(this.ModelsTablePageObject.summary, 'DISPLAY 1 - 10 OF 10', 'Summary is valid (2)');\n      assert.equal(this.ModelsTablePageObject.columnsDropdownLabel, messages2['columns-title'], 'Columns-dropdown title is valid (2)');\n      assert.equal(this.ModelsTablePageObject.columnsDropDown.objectAt(0).label, messages2['columns-showAll'], 'Columns-dropdown \"showAll\" is valid (2)');\n      assert.equal(this.ModelsTablePageObject.columnsDropDown.objectAt(1).label, messages2['columns-hideAll'], 'Columns-dropdown \"hideAll\" is valid (2)');\n      assert.equal(this.ModelsTablePageObject.columnsDropDown.objectAt(2).label, messages2['columns-restoreDefaults'], 'Columns-dropdown \"restoreDefaults\" is valid (2)');\n      assert.equal(this.ModelsTablePageObject.globalFilterLabel, messages2.searchLabel, 'Global-search label is valid (2)');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), [messages2.allColumnsAreHidden], 'Message about all hidden columns is valid (2)');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(0).click();\n      await this.ModelsTablePageObject.doGlobalFilter('invalid string');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), [messages2.noDataToShow], 'Message about no data is valid (2)');\n    });\n    (0, _qunit.test)('some custom messages', async function (assert) {\n      const messages = {\n        searchLabel: 'Se@rch:',\n        'columns-title': 'ColumnZ',\n        'columns-showAll': 'Show Me All!',\n        'columns-hideAll': 'Hide All!',\n        'columns-restoreDefaults': 'Restore My Columns',\n        allColumnsAreHidden: 'No visible columns, dude!',\n        noDataToShow: 'No data. Sorry, bro...',\n        editRowButtonLabel: 'Ed1t',\n        saveRowButtonLabel: 'S@ve',\n        cancelRowButtonLabel: 'Canc3l'\n      };\n      assert.notOk(messages.tableSummary, 'tableSummary is not set in the custom messages');\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1),\n        themeInstance: (0, _getThemeClass.default)(this).create({\n          messages\n        })\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns themeInstance=themeInstance}}\n      */\n      {\n        id: \"YO/pccLz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"themeInstance\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"themeInstance\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 10 Clear all filters', 'Summary is valid');\n    });\n    (0, _qunit.test)('custom icons', async function (assert) {\n      const customIcons = {\n        'sort-asc': 'sort-asc',\n        'sort-desc': 'sort-desc',\n        'column-visible': 'column-visible',\n        'column-hidden': 'column-hidden',\n        'nav-first': 'nav-first',\n        'nav-prev': 'nav-prev',\n        'nav-next': 'nav-next',\n        'nav-last': 'nav-last'\n      };\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1),\n        themeInstance: (0, _getThemeClass.default)(this).create(customIcons)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns themeInstance=themeInstance}}\n      */\n      {\n        id: \"YO/pccLz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"themeInstance\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"themeInstance\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.equal(this.element.querySelectorAll('.sort-asc').length, 1, 'sort asc 1 column');\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.equal(this.element.querySelectorAll('.sort-asc').length, 1, 'sort asc 1 column');\n      assert.equal(this.element.querySelectorAll('.sort-desc').length, 1, 'sort desc 1 column');\n      assert.equal(this.element.querySelectorAll('.column-visible').length, 2, 'all columns are visible');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click();\n      assert.equal(this.element.querySelectorAll('.column-visible').length, 1, '1 column is visible');\n      assert.equal(this.element.querySelectorAll('.column-hidden').length, 1, '1 column is hidden');\n      assert.ok(this.ModelsTablePageObject.navigation.btns.objectAt(0).icon.includes('nav-first'), 'First-button has valid class');\n      assert.ok(this.ModelsTablePageObject.navigation.btns.objectAt(1).icon.includes('nav-prev'), 'Prev-button has valid class');\n      assert.ok(this.ModelsTablePageObject.navigation.btns.objectAt(2).icon.includes('nav-next'), 'Next-button has valid class');\n      assert.ok(this.ModelsTablePageObject.navigation.btns.objectAt(3).icon.includes('nav-last'), 'Last-button has valid class');\n    });\n    (0, _qunit.test)('columns column cell classes', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].className = 'custom-column-class';\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.querySelectorAll('tbody .custom-column-class').length, 10, 'Custom column class exists on each column cell');\n    });\n    (0, _qunit.test)('column title auto generation', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns.setEach('title', null);\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['Index', 'Reversed index']);\n    });\n    (0, _qunit.test)('`sortedBy` has higher priority than `propertyName`', async function (assert) {\n      const columns = (0, _f.generateColumns)(['someWord', 'index']);\n      columns[0].sortedBy = 'index';\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), oneTenArrayDig, 'Content is valid (sorting by `index` desc)');\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), tenOneArrayDig, 'Content is valid (sorting by `index` asc)');\n    });\n    (0, _qunit.test)('sorting , custom sort function (multi `true`)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'index2']);\n\n      columns[0].sortFunction = function sortEvenFirst(i1, i2) {\n        if (i1 % 2 === 0) {\n          if (i2 % 2 === 0) {\n            return Ember.compare(i1, i2);\n          }\n\n          return -1;\n        } else {\n          if (i2 % 2 === 0) {\n            return 1;\n          }\n\n          return Ember.compare(i1, i2);\n        }\n      };\n\n      this.setProperties({\n        columns: columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data}}\n      */\n      {\n        id: \"Z+X3QfSp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['2', '4', '6', '8', '10', '1', '3', '5', '7', '9'], 'Content is valid (sorting 1st column asc)');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['9', '7', '5', '3', '1', '10', '8', '6', '4', '2'], 'Content is valid (sorting 1st column desc)');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Content is valid (sorting 1st column asc) - restore defaults');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['1', '1', '2', '2', '3', '3', '4', '4', '5', '5'], 'Content is valid (sorting 2nd column asc) - restore defaults');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['3', '4', '7', '8', '1', '2', '5', '6', '9', '10'], 'Content is valid (sorting 1st column desc)');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['2', '2', '4', '4', '1', '1', '3', '3', '5', '5'], 'Content is valid (sorting 2nd column asc)');\n    });\n    (0, _qunit.test)('sorting, custom sort function (multi `false`)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'index2']);\n\n      columns[0].sortFunction = function sortEvenFirst(i1, i2) {\n        if (i1 % 2 === 0) {\n          if (i2 % 2 === 0) {\n            return Ember.compare(i1, i2);\n          }\n\n          return -1;\n        } else {\n          if (i2 % 2 === 0) {\n            return 1;\n          }\n\n          return Ember.compare(i1, i2);\n        }\n      };\n\n      this.setProperties({\n        columns: columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data multipleColumnsSorting=false}}\n      */\n      {\n        id: \"/UMqb4C6\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"multipleColumnsSorting\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['2', '4', '6', '8', '10', '1', '3', '5', '7', '9'], 'Content is valid (sorting 1st column asc)');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['9', '7', '5', '3', '1', '10', '8', '6', '4', '2'], 'Content is valid (sorting 1st column desc)');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Content is valid (sorting 1st column asc) - restore defaults');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['1', '1', '2', '2', '3', '3', '4', '4', '5', '5'], 'Content is valid (sorting 2nd column asc) - restore defaults');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['9', '7', '5', '3', '1', '10', '8', '6', '4', '2'], 'Content is valid (sorting 1st column desc)');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['5', '4', '3', '2', '1', '5', '4', '3', '2', '1'], 'Content is valid (sorting 2nd reverted)');\n    });\n    (0, _qunit.test)('column is sorted with `sortedBy` when `propertyName` is not provided', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'index2']);\n      columns[1].sortedBy = 'index';\n      delete columns[1].propertyName;\n      columns[1].component = 'custom-concat';\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(3, 1).reverse()\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data multipleColumnsSorting=false}}\n      */\n      {\n        id: \"/UMqb4C6\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"multipleColumnsSorting\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(1).click();\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), ['1+3', '2+2', '3+1'], 'Content is sorted by `index`');\n    });\n    (0, _qunit.test)('table is sorted by first column with `propertyName` or `sortedBy` by default, according to sortDirection', async function (assert) {\n      const data = (0, _f.generateContent)(10, 1).reverse();\n      const columns = (0, _f.generateColumns)(['index']);\n      columns[0].sortPrecedence = 0;\n      columns[0].sortDirection = 'asc';\n      this.setProperties({\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), oneTenArrayDig, 'Content is sorted correctly');\n    });\n    (0, _qunit.test)('table is not sorted by first column with `propertyName` or `sortedBy` by default', async function (assert) {\n      const data = (0, _f.generateContent)(10, 1).reverse();\n      const columns = (0, _f.generateColumns)(['indexWithHtml', 'index']);\n      delete columns[0].propertyName;\n      this.setProperties({\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(1), tenOneArrayDig, 'Content is sorted correctly');\n    });\n    (0, _qunit.test)('visible page numbers', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns: (0, _f.generateColumns)(['index']),\n        currentPageNumber: 1,\n        useNumericPagination: true,\n        pageSize: 1\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns currentPageNumber=currentPageNumber pageSize=pageSize useNumericPagination=useNumericPagination}}\n      */\n      {\n        id: \"RB1YEV9x\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"currentPageNumber\\\",\\\"pageSize\\\",\\\"useNumericPagination\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"currentPageNumber\\\"]],[24,[\\\"pageSize\\\"]],[24,[\\\"useNumericPagination\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      Ember.A([{\n        currentPageNumber: 1,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 2,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 2,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 2,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 3,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 3,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 2,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 3,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 4,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 4,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 3,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 4,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 5,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 5,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 4,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 5,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 6,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 6,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 5,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 6,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 7,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 7,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 6,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 7,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 8,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 8,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 7,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 8,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 9,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 9,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 8,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 9,\n          isLink: true,\n          isActive: true\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: false\n        }]\n      }, {\n        currentPageNumber: 10,\n        visiblePageNumbers: [{\n          label: 1,\n          isLink: true,\n          isActive: false\n        }, {\n          label: '...',\n          isLink: false,\n          isActive: false\n        }, {\n          label: 9,\n          isLink: true,\n          isActive: false\n        }, {\n          label: 10,\n          isLink: true,\n          isActive: true\n        }]\n      }]).forEach(test => {\n        this.set('currentPageNumber', test.currentPageNumber);\n        assert.deepEqual(this.ModelsTablePageObject.navigation.navigationButtons, Ember.A(test.visiblePageNumbers).mapBy('label').map(c => `${c}`), `10 pages, active is ${test.currentPageNumber}`);\n      }, this);\n      this.set('data', (0, _f.generateContent)(10, 1));\n      this.set('pageSize', 10);\n      assert.deepEqual(this.ModelsTablePageObject.navigation.navigationButtons, ['1'], 'Only 1 page');\n    });\n    (0, _qunit.test)('visible page numbers with #collapseNumPaginationForPagesCount', async function (assert) {\n      this.set('data', (0, _f.generateContent)(40, 1));\n      this.set('columns', (0, _f.generateColumns)(['index']));\n      this.set('collapseNumPaginationForPagesCount', 4);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns useNumericPagination=true collapseNumPaginationForPagesCount=collapseNumPaginationForPagesCount}}\n      */\n      {\n        id: \"DZAbFxRP\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useNumericPagination\\\",\\\"collapseNumPaginationForPagesCount\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,[24,[\\\"collapseNumPaginationForPagesCount\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.numericNavigation.mapBy('text'), ['1', '2', '3', '4']);\n      this.set('collapseNumPaginationForPagesCount', 1);\n      assert.deepEqual(this.ModelsTablePageObject.numericNavigation.mapBy('text'), ['1', '2', '...', '4']);\n    });\n    (0, _qunit.test)('#event on user interaction (filtering by column)', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'someWord']),\n        data: (0, _f.generateContent)(10, 1),\n        displayDataChangedAction: 'displayDataChanged'\n      });\n\n      this.actions.displayDataChanged = function (data) {\n        assert.deepEqual(data.columnFilters, {\n          someWord: 'One'\n        });\n        assert.deepEqual(data.columns, [{\n          propertyName: 'index',\n          filterField: 'index',\n          sortField: 'index',\n          filterString: '',\n          sorting: 'none'\n        }, {\n          propertyName: 'someWord',\n          filterField: 'someWord',\n          sortField: 'someWord',\n          filterString: 'One',\n          sorting: 'none'\n        }]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\")}}\n      */\n      {\n        id: \"tAqkDJuA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('One');\n    });\n    (0, _qunit.test)('#event on user interaction (global filtering))', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'someWord']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n\n      this.actions.displayDataChanged = function (data) {\n        assert.equal(data.filterString, 'One');\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\")}}\n      */\n      {\n        id: \"tAqkDJuA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('One');\n    });\n    (0, _qunit.test)('#event on user interaction (sorting)', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'someWord']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n\n      this.actions.displayDataChanged = function (data) {\n        assert.deepEqual(data.sort, ['index:asc']);\n        assert.deepEqual(data.columns, [{\n          propertyName: 'index',\n          filterField: 'index',\n          sortField: 'index',\n          filterString: '',\n          sorting: 'asc'\n        }, {\n          propertyName: 'someWord',\n          filterField: 'someWord',\n          sortField: 'someWord',\n          filterString: '',\n          sorting: 'none'\n        }]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\")}}\n      */\n      {\n        id: \"tAqkDJuA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n    });\n    (0, _qunit.test)('#event on user interaction (expanding rows)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['id']);\n      const records = (0, _f.generateContent)(30, 1);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        columns,\n        data: records\n      });\n\n      this.actions.displayDataChanged = function (data) {\n        assert.deepEqual(data.expandedItems, [records[0]]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\") expandedRowComponent=(component \"expanded-row\")}}\n      */\n      {\n        id: \"Qyf1YTDP\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\",\\\"expandedRowComponent\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null],[28,\\\"component\\\",[\\\"expanded-row\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n    });\n    (0, _qunit.test)('#event on user interaction (selecting rows)', async function (assert) {\n      const records = (0, _f.generateContent)(30, 1);\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['id']),\n        data: records\n      });\n\n      this.actions.displayDataChanged = function (data) {\n        assert.deepEqual(data.selectedItems, [records[0]]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\")}}\n      */\n      {\n        id: \"tAqkDJuA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n    });\n    (0, _qunit.test)('#event on user interaction (clear all filters)', async function (assert) {\n      assert.expect(6);\n      const calls = [// after filter by first column\n      {\n        filterString: '',\n        columnFilters: {\n          id: '1'\n        }\n      }, // after global filter\n      {\n        filterString: '1',\n        columnFilters: {\n          id: '1'\n        }\n      }, // after clear all this.ModelsTablePageObject.filters\n      {\n        filterString: '',\n        columnFilters: {}\n      }];\n      let indx = 0;\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['id']),\n        data: (0, _f.generateContent)(30, 1)\n      });\n\n      this.actions.displayDataChanged = function (settings) {\n        const call = calls[indx];\n        assert.equal(call.filterString, settings.filterString, `#${indx + 1}. filterString`);\n        assert.deepEqual(call.columnFilters, settings.columnFilters, `#${indx + 1}. columnFilters`);\n        indx++;\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\")}}\n      */\n      {\n        id: \"tAqkDJuA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter(1);\n      await this.ModelsTablePageObject.doGlobalFilter(1);\n      await this.ModelsTablePageObject.clearAllFilters();\n    });\n    (0, _qunit.test)('#event on user interaction (toggle all columns visibility)', async function (assert) {\n      assert.expect(2);\n      const expects = [[{\n        propertyName: 'index',\n        isHidden: true,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: true,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: false,\n        mayBeHidden: true\n      }]];\n      let i = 0;\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n\n      this.actions.onVisibilityChange = function (data) {\n        assert.deepEqual(data, expects[i++]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnsVisibilityChangedAction=(action \"onVisibilityChange\")}}\n      */\n      {\n        id: \"bnQ8GVmZ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnsVisibilityChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"onVisibilityChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click(); // hide all\n\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(0).click(); // show all\n    });\n    (0, _qunit.test)('#event on user interaction (toggle single column visibility)', async function (assert) {\n      assert.expect(2);\n      const expects = [[{\n        propertyName: 'index',\n        isHidden: true,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: false,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: false,\n        mayBeHidden: true\n      }]];\n      let i = 0;\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n\n      this.actions.onVisibilityChange = function (data) {\n        assert.deepEqual(data, expects[i++]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnsVisibilityChangedAction=(action \"onVisibilityChange\")}}\n      */\n      {\n        id: \"bnQ8GVmZ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnsVisibilityChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"onVisibilityChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click(); // hide 1st column\n\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click(); // show 1st column\n    });\n    (0, _qunit.test)('#event on user interaction (restore default columns visibility)', async function (assert) {\n      assert.expect(3);\n      const expects = [[{\n        propertyName: 'index',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: false,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: true,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: false,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: true,\n        mayBeHidden: true\n      }, {\n        propertyName: 'reversedIndex',\n        isHidden: false,\n        mayBeHidden: true\n      }]];\n      let i = 0;\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].isHidden = true;\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n\n      this.actions.onVisibilityChange = function (data) {\n        assert.deepEqual(data, expects[i++]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnsVisibilityChangedAction=(action \"onVisibilityChange\")}}\n      */\n      {\n        id: \"bnQ8GVmZ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnsVisibilityChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"onVisibilityChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click(); // show 1st column\n\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(2).click(); // restore defaults\n    });\n    (0, _qunit.test)('#event on user interaction (toggle columns set visibility)', async function (assert) {\n      assert.expect(4);\n      const expects = [[{\n        propertyName: 'index',\n        isHidden: true,\n        mayBeHidden: true\n      }, {\n        propertyName: 'index2',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'id',\n        isHidden: false,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: true,\n        mayBeHidden: true\n      }, {\n        propertyName: 'index2',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'id',\n        isHidden: true,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'index2',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'id',\n        isHidden: true,\n        mayBeHidden: true\n      }], [{\n        propertyName: 'index',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'index2',\n        isHidden: false,\n        mayBeHidden: true\n      }, {\n        propertyName: 'id',\n        isHidden: false,\n        mayBeHidden: true\n      }]];\n      let i = 0;\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'index2', 'id']),\n        data: (0, _f.generateContent)(10, 1),\n        columnSets: [{\n          label: 'Set 1',\n          showColumns: ['index', 'id'],\n          toggleSet: true\n        }]\n      });\n\n      this.actions.onVisibilityChange = function (data) {\n        assert.deepEqual(data, expects[i++]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnSets=columnSets columnsVisibilityChangedAction=(action \"onVisibilityChange\")}}\n      */\n      {\n        id: \"5//tx17u\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnSets\\\",\\\"columnsVisibilityChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"columnSets\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"onVisibilityChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click(); // hide 1st columns set\n\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(3).click(); // show 1st columns set\n    });\n    (0, _qunit.test)('#event on user interaction (page size changing)', async function (assert) {\n      assert.expect(2);\n      const expects = [25, 50];\n      let i = 0;\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'reversedIndex']),\n        data: (0, _f.generateContent)(10, 1)\n      });\n\n      this.actions.displayDataChanged = function (data) {\n        assert.equal(data.pageSize, expects[i++]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data displayDataChangedAction=(action \"displayDataChanged\")}}\n      */\n      {\n        id: \"tAqkDJuA\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"displayDataChangedAction\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.changePageSize(25);\n      await this.ModelsTablePageObject.changePageSize(50);\n    });\n    (0, _qunit.test)('show first page if for some reasons there is no content for current page, but table data exists', async function (assert) {\n      assert.expect(1);\n      const data = (0, _f.generateContent)(11, 1);\n      const columns = (0, _f.generateColumns)(['index', 'indexWithHtml']);\n      columns.push({\n        title: 'Delete',\n        component: 'deleteRow'\n      });\n      const self = this;\n      this.setProperties({\n        data,\n        columns\n      });\n\n      this.actions.deleteRecord = function (record) {\n        self.set('data', data.without(record));\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns columnComponents=(hash\n              deleteRow=(\n                component \"delete-row-comp\"\n                onClick=(action \"deleteRecord\")\n              ))}}\n      */\n      {\n        id: \"vUsopKkn\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"columnComponents\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[28,\\\"hash\\\",null,[[\\\"deleteRow\\\"],[[28,\\\"component\\\",[\\\"delete-row-comp\\\"],[[\\\"onClick\\\"],[[28,\\\"action\\\",[[23,0,[]],\\\"deleteRecord\\\"],null]]]]]]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      })); // move to the 2nd page and delete 1 row there\n\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      await (0, _testHelpers.click)('td button');\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 1 - 10 of 10 Clear all filters', 'First page is shown');\n    });\n    (0, _qunit.test)('row deleted in the middle page', async function (assert) {\n      assert.expect(1);\n      const data = (0, _f.generateContent)(31, 1);\n      const columns = (0, _f.generateColumns)(['index', 'indexWithHtml']);\n      columns.push({\n        title: 'Delete',\n        component: 'deleteRow'\n      });\n      const self = this;\n      this.setProperties({\n        data,\n        columns\n      });\n\n      this.actions.deleteRecord = function (record) {\n        self.set('data', data.without(record));\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns columnComponents=(hash\n              deleteRow=(\n                component \"delete-row-comp\"\n                onClick=(action \"deleteRecord\")\n              ))}}\n      */\n      {\n        id: \"vUsopKkn\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"columnComponents\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[28,\\\"hash\\\",null,[[\\\"deleteRow\\\"],[[28,\\\"component\\\",[\\\"delete-row-comp\\\"],[[\\\"onClick\\\"],[[28,\\\"action\\\",[[23,0,[]],\\\"deleteRecord\\\"],null]]]]]]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      })); // move to the 2nd page and delete 1 row there\n\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      await (0, _testHelpers.click)('td button');\n      assert.equal(this.ModelsTablePageObject.summary, 'Show 11 - 20 of 30 Clear all filters', 'Second page is shown');\n    });\n    (0, _qunit.test)('updateable columns (disabled)', async function (assert) {\n      const columns1 = (0, _f.generateColumns)(['index', 'someWord']);\n      const columns2 = (0, _f.generateColumns)(['index', 'index2', 'someWord']);\n      this.setProperties({\n        columns: columns1,\n        data: (0, _f.generateContent)(10, 1),\n        columnsAreUpdateable: false\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnsAreUpdateable=columnsAreUpdateable}}\n      */\n      {\n        id: \"L2Ubx+cV\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnsAreUpdateable\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"columnsAreUpdateable\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('1');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index', 'someWord'], 'two columns are shown');\n      assert.deepEqual(this.ModelsTablePageObject.columnsDropDown.mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'someWord'], 'two columns are in columns dropdown');\n      this.set('columns', columns2);\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index', 'someWord'], 'columns are not updated');\n      assert.deepEqual(this.ModelsTablePageObject.columnsDropDown.mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'someWord'], 'columns dropdown is not updated');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(0).inputValue, '1', 'column filter was not dropped');\n      assert.ok(this.ModelsTablePageObject.sorting.objectAt(0).isSorted, 'column sorting was not dropped');\n    });\n    (0, _qunit.test)('updateable columns (enabled)', async function (assert) {\n      const columns1 = (0, _f.generateColumns)(['index', 'someWord']);\n      const columns2 = (0, _f.generateColumns)(['index', 'index2', 'someWord']);\n      this.setProperties({\n        columns: columns1,\n        data: (0, _f.generateContent)(10, 1),\n        columnsAreUpdateable: true\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data columnsAreUpdateable=columnsAreUpdateable}}\n      */\n      {\n        id: \"L2Ubx+cV\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"columnsAreUpdateable\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"columnsAreUpdateable\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index', 'someWord'], 'two columns are shown');\n      assert.deepEqual(this.ModelsTablePageObject.columnsDropDown.mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'someWord'], 'two columns are in columns dropdown');\n      await this.ModelsTablePageObject.filters.objectAt(0).inputFilter('1');\n      await this.ModelsTablePageObject.sorting.objectAt(0).click();\n      this.set('columns', columns2);\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['index', 'index2', 'someWord'], 'columns are updated');\n      assert.deepEqual(this.ModelsTablePageObject.columnsDropDown.mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'index2', 'someWord'], 'columns dropdown is updated');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(0).inputValue, '', 'column filter was dropped');\n    });\n    (0, _qunit.test)('filtering with `doFilteringByHiddenColumns` = false', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'someWord']),\n        data: (0, _f.generateContent)(10, 1),\n        doFilteringByHiddenColumns: false\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data doFilteringByHiddenColumns=doFilteringByHiddenColumns}}\n      */\n      {\n        id: \"I/xd11bl\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"doFilteringByHiddenColumns\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"doFilteringByHiddenColumns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(4).click();\n      await this.ModelsTablePageObject.doGlobalFilter('one');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['No records to show'], 'Content is not changed');\n      this.set('doFilteringByHiddenColumns', true);\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['No records to show'], 'Content is not changed after `doFilteringByHiddenColumns` updating');\n      await this.ModelsTablePageObject.doGlobalFilter('');\n      await this.ModelsTablePageObject.doGlobalFilter('one');\n      assert.deepEqual(this.ModelsTablePageObject.getColumnCells(0), ['1'], 'Content is filtered');\n    });\n    (0, _qunit.test)('grouped headers', async function (assert) {\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index', 'index2', 'reversedIndex', 'indexWithHtml', 'someWord']),\n        data: (0, _f.generateContent)(10, 1),\n        groupedHeaders: [[{\n          title: 'BigTitle',\n          colspan: 5\n        }], [{\n          title: 'SubTitle1',\n          colspan: 2\n        }, {\n          title: 'SubTitle2',\n          colspan: 3\n        }]]\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data groupedHeaders=groupedHeaders}}\n      */\n      {\n        id: \"7BCpYvVv\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"groupedHeaders\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[24,[\\\"groupedHeaders\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.headers.objectAt(0).cells, ['BigTitle']);\n      assert.deepEqual(this.ModelsTablePageObject.headers.objectAt(0).colspans, ['5']);\n      assert.deepEqual(this.ModelsTablePageObject.headers.objectAt(1).cells, ['SubTitle1', 'SubTitle2']);\n      assert.deepEqual(this.ModelsTablePageObject.headers.objectAt(1).colspans, ['2', '3']);\n    });\n    (0, _qunit.test)('expandable rows (multipleExpand = true)', async function (assert) {\n      const columns = (0, _f.generateColumns)(['id']);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(30, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data expandedRowComponent=(component \"expanded-row\") multipleExpand=true}}\n      */\n      {\n        id: \"G58z1cq3\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"expandedRowComponent\\\",\\\"multipleExpand\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"component\\\",[\\\"expanded-row\\\"],null],true]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.collapseRowButtons, 0, 'All rows are collapsed by default');\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).expanded, 'First row is expanded');\n      assert.equal(this.element.querySelectorAll('.expand-0').length, 1, 'Expanded row content exists');\n      assert.equal(this.element.querySelectorAll('.expand-0 .id').length, 1, 'Expanded row content is valid');\n      await this.ModelsTablePageObject.rows.objectAt(1).expand();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).expanded, 'First row is still expanded');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).expanded, 'Second row is expanded');\n      await this.ModelsTablePageObject.rows.objectAt(0).collapse();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).collapsed, 'First row is collapsed');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).expanded, 'Second row is still expanded');\n      await this.ModelsTablePageObject.rows.objectAt(1).collapse();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).collapsed, 'Second row is collapsed');\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).collapsed, 'First row on the second page is collapsed');\n    });\n    (0, _qunit.test)('expandable rows (multipleExpand = true, expand All rows)', async function (assert) {\n      Ember.defineProperty(this, 'expandedItems', Ember.computed('flag', 'data.@each.index1', function () {\n        return Ember.get(this, 'flag') ? Ember.get(this, 'data').filter((itemn, index) => index % 2 === 0) : Ember.A([]);\n      }).readOnly());\n      const columns = (0, _f.generateColumns)(['id']);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        componentForFilterCell: 'expand-all-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        columns,\n        flag: false,\n        data: (0, _f.generateContent)(30, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data expandedRowComponent=(component \"expanded-row\") multipleExpand=true}}\n      */\n      {\n        id: \"G58z1cq3\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"expandedRowComponent\\\",\\\"multipleExpand\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"component\\\",[\\\"expanded-row\\\"],null],true]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.collapseRowButtons, 0, 'All rows are collapsed by default');\n      await this.ModelsTablePageObject.expandAllRows();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 10, 'All rows are expanded');\n      assert.deepEqual(this.ModelsTablePageObject.rowExpands.mapBy('id'), oneTenArrayDig, 'Expanded rows content is valid');\n      await this.ModelsTablePageObject.collapseAllRows();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 0, 'All rows are collapsed');\n      await this.ModelsTablePageObject.expandAllRows();\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 0, 'All rows on the second page are collapsed');\n    });\n    (0, _qunit.test)('expandable rows (multipleExpand = false)', async function (assert) {\n      let columns = (0, _f.generateColumns)(['id']);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(30, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data expandedRowComponent=(component \"expanded-row\") multipleExpand=false}}\n      */\n      {\n        id: \"9966tlC8\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"expandedRowComponent\\\",\\\"multipleExpand\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"component\\\",[\\\"expanded-row\\\"],null],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.collapseRowButtons, 0, 'All rows are collapsed by default');\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).expanded, 'First row is expanded');\n      assert.equal(this.ModelsTablePageObject.rowExpands.objectAt(0).id, '1', 'Expanded row content is valid');\n      await this.ModelsTablePageObject.rows.objectAt(1).expand();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).collapsed, 'First row is collapsed');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).expanded, 'Second row is expanded');\n      await this.ModelsTablePageObject.rows.objectAt(1).collapse();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).collapsed, 'Second row is collapsed');\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      await this.ModelsTablePageObject.navigation.goToNextPage();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).collapsed, 'First row on the second page is collapsed');\n    });\n    (0, _qunit.test)('#251 expand is dropped if expanded row is filtered out', async function (assert) {\n      let columns = (0, _f.generateColumns)(['id']);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(30, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data expandedRowComponent=(component \"expanded-row\") multipleExpand=false}}\n      */\n      {\n        id: \"9966tlC8\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"expandedRowComponent\\\",\\\"multipleExpand\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],[28,\\\"component\\\",[\\\"expanded-row\\\"],null],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.collapseRowButtons, 0, 'All rows are collapsed by default');\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).expanded, 'First row is expanded');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('4');\n      assert.equal(this.ModelsTablePageObject.rowExpands.length, 0, 'Expanded row is filtered out');\n      await this.ModelsTablePageObject.filters.objectAt(1).clearFilter();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).expanded, 'First row is expanded after filter is dropped');\n    });\n    (0, _qunit.test)('selectable rows (multipleSelect = true)', async function (assert) {\n      const checkboxColumn = {\n        component: 'select-row-checkbox',\n        useFilter: false,\n        mayBeHidden: false,\n        componentForSortCell: 'select-all-rows-checkbox'\n      };\n      const columns = (0, _f.generateColumns)(['id']);\n      columns.unshift(checkboxColumn);\n      this.setProperties({\n        data: (0, _f.generateContent)(30, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns multipleSelect=true}}\n      */\n      {\n        id: \"+NHItgPb\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"multipleSelect\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('selected').length, 0, 'No selected rows by default');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is selected');\n      await this.ModelsTablePageObject.rows.objectAt(1).click();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is still selected');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).selected, 'Second row is selected');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is not selected');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).selected, 'Second row is selected');\n      await this.ModelsTablePageObject.rows.objectAt(1).click();\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row still is not selected');\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(1).selected, 'Second row is not selected');\n      await this.ModelsTablePageObject.toggleAllSelection();\n      assert.equal(this.ModelsTablePageObject.rows.filter(r => r.selected).length, 10, 'All rows are selected');\n      await this.ModelsTablePageObject.toggleAllSelection();\n      assert.equal(this.ModelsTablePageObject.rows.filter(r => r.selected).length, 0, 'All rows are not selected');\n    });\n    (0, _qunit.test)('selectable rows (multipleSelect = false)', async function (assert) {\n      this.setProperties({\n        data: (0, _f.generateContent)(30, 1),\n        columns: (0, _f.generateColumns)(['id'])\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns multipleSelect=false}}\n      */\n      {\n        id: \"dzm/QB6G\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"multipleSelect\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('selected').length, 0, 'No selected rows by default');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is selected');\n      await this.ModelsTablePageObject.rows.objectAt(1).click();\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is not selected');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).selected, 'Second row is selected');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is selected');\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(1).selected, 'Second row is not selected');\n      await this.ModelsTablePageObject.rows.objectAt(1).click();\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is not selected');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(1).selected, 'Second row is selected');\n    });\n    (0, _qunit.test)('row-expand should trigger select/deselect row', async function (assert) {\n      let columns = (0, _f.generateColumns)(['index']);\n      columns = [{\n        component: 'expand-toggle',\n        mayBeHidden: false\n      }, ...columns];\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(30, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns expandedRowComponent=(component \"expanded-row\")}}\n      */\n      {\n        id: \"4N2qTB0r\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"expandedRowComponent\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[28,\\\"component\\\",[\\\"expanded-row\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).expanded, 'First row is expanded');\n      assert.ok(this.ModelsTablePageObject.rowExpands.objectAt(0).selected, 'First row expand is selected');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is selected');\n      await this.ModelsTablePageObject.rowExpands.objectAt(0).click();\n      assert.notOk(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is not selected');\n      assert.notOk(this.ModelsTablePageObject.rowExpands.objectAt(0).selected, 'First row expand is not selected');\n      await this.ModelsTablePageObject.rowExpands.objectAt(0).click();\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).selected, 'First row is selected');\n      assert.ok(this.ModelsTablePageObject.rowExpands.objectAt(0).selected, 'First row expand is selected');\n    });\n    (0, _qunit.test)('rows may be preselected with `selectedItems`', async function (assert) {\n      const data = (0, _f.generateContent)(30, 1);\n      Ember.defineProperty(this, 'selectedItems', Ember.computed('flag', 'data.@each.index1', function () {\n        return Ember.get(this, 'flag') ? Ember.get(this, 'data').filter((itemn, index) => index % 2 === 0) : Ember.A([]);\n      }).readOnly());\n      this.setProperties({\n        columns: (0, _f.generateColumns)(['index1', 'index2']),\n        flag: true,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns selectedItems=selectedItems}}\n      */\n      {\n        id: \"/TO5pBo8\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"selectedItems\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"selectedItems\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('selected').length, 5, 'rows are initially selected correctly');\n      await this.ModelsTablePageObject.rows.objectAt(1).click();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('selected').length, 6, 'One more row become selected');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('selected').length, 5, 'One row become deselected');\n      this.set('flag', false);\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('selected').length, 0, 'All rows are deselected after dropping `selectedItems`');\n    });\n    (0, _qunit.test)('rows may be expanded initially with `expandedItems`', async function (assert) {\n      const data = (0, _f.generateContent)(30, 1);\n      Ember.defineProperty(this, 'expandedItems', Ember.computed('flag', 'data.@each.index1', function () {\n        return Ember.get(this, 'flag') ? Ember.get(this, 'data').filter((itemn, index) => index % 2 === 0) : Ember.A([]);\n      }).readOnly());\n      const columns = (0, _f.generateColumns)(['index1', 'index2']);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        columns,\n        flag: true,\n        data\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns expandedItems=expandedItems}}\n      */\n      {\n        id: \"XpJqz97h\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"expandedItems\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[24,[\\\"expandedItems\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 5, 'rows are initially expanded correctly');\n      await this.ModelsTablePageObject.rows.objectAt(1).expand();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 6, 'One more row become expanded');\n      await this.ModelsTablePageObject.rows.objectAt(0).collapse();\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 5, 'One row become collapsed');\n      this.set('flag', false);\n      assert.equal(this.ModelsTablePageObject.rows.filterBy('expanded').length, 0, 'All rows are collapsed after dropping `expandedItems`');\n    });\n    (0, _qunit.test)('columns column contains original definition as a nested property', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index1', 'index2']);\n      columns[0].componentForSortCell = 'custom-sort-cell';\n      columns[0].CustomColumString = 'custom-column-string';\n      columns[0].CustomColumObject = {\n        name: 'custom-column-object'\n      };\n      columns[0].CustomColumBool = true;\n      columns[0].CustomColumNumber = 1;\n      this.setProperties({\n        columns,\n        data: (0, _f.generateContent)(10, 1)\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table columns=columns data=data multipleColumnsSorting=false}}\n      */\n      {\n        id: \"/UMqb4C6\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"columns\\\",\\\"data\\\",\\\"multipleColumnsSorting\\\"],[[24,[\\\"columns\\\"]],[24,[\\\"data\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.sorting.mapBy('title'), ['custom-column-string|custom-column-object|true|1', 'index2'], 'Custom column properties present in originalDefinition property in processedColumns');\n    });\n    (0, _qunit.test)('#event on user interaction (row double-click)', async function (assert) {\n      assert.expect(2);\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        data,\n        columns: (0, _f.generateColumns)(['index'])\n      });\n      const indx = 4;\n\n      this.actions.rowDoubleClick = function (index, row) {\n        assert.equal(index, indx, 'row is double-clicked');\n        assert.deepEqual(row, data[indx]);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns rowDoubleClickAction=(action \"rowDoubleClick\")}}\n      */\n      {\n        id: \"zbYWi8y7\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"rowDoubleClickAction\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"rowDoubleClick\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.rows.objectAt(indx).dbClick();\n    });\n    (0, _qunit.test)('#event on user interaction (row hover/out)', async function (assert) {\n      assert.expect(6);\n      const data = (0, _f.generateContent)(10, 1);\n      this.setProperties({\n        data,\n        columns: (0, _f.generateColumns)(['index'])\n      });\n      const indx = 4;\n      let fl = false;\n      this.set('rowHover', (index, row) => {\n        const i = fl ? indx + 1 : indx;\n        assert.equal(index, i, 'row is hovered');\n        assert.deepEqual(row, data[i]);\n        fl = true;\n      });\n      this.set('rowOut', (index, row) => {\n        assert.equal(index, indx, 'row is hover-out');\n        assert.deepEqual(row, data[indx]);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns rowHoverAction=(action rowHover) rowOutAction=(action rowOut)}}\n      */\n      {\n        id: \"PQgzAJNo\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"rowHoverAction\\\",\\\"rowOutAction\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],[28,\\\"action\\\",[[23,0,[]],[24,[\\\"rowHover\\\"]]],null],[28,\\\"action\\\",[[23,0,[]],[24,[\\\"rowOut\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await (0, _testHelpers.triggerEvent)(this.ModelsTablePageObject.rows.objectAt(indx).getSelf(), 'mouseenter');\n      await (0, _testHelpers.triggerEvent)(this.ModelsTablePageObject.rows.objectAt(indx).getSelf(), 'mouseleave');\n      await (0, _testHelpers.triggerEvent)(this.ModelsTablePageObject.rows.objectAt(indx + 1).getSelf(), 'mouseenter');\n    });\n    (0, _qunit.test)('#context-components render custom simple pagination', async function (assert) {\n      this.set('data', (0, _f.generateContent)(30, 1));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table data=data as |c|}}\n              {{c.table}}\n              {{#c.footer as |f|}}\n                {{f.summary}}\n                {{f.size-select}}\n                {{#f.pagination-simple}}\n                  <a href=\"#\" {{action \"gotoFirst\"}} class={{gotoBackEnabled:enabled:disabled}}>F</a>&nbsp;\n                  <a href=\"#\" {{action \"gotoPrev\"}} class={{gotoBackEnabled:enabled:disabled}}>P</a>&nbsp;\n                  <a href=\"#\" {{action \"gotoNext\"}} class={{gotoForwardEnabled:enabled:disabled}}>N</a>&nbsp;\n                  <a href=\"#\" {{action \"gotoLast\"}} class={{gotoForwardEnabled:enabled:disabled}}>L</a>\n                {{/f.pagination-simple}}\n              {{/c.footer}}\n            {{/models-table}}\n          \n      */\n      {\n        id: \"nDiaCXQW\",\n        block: \"{\\\"symbols\\\":[\\\"c\\\",\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\"],[[24,[\\\"data\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[23,1,[\\\"table\\\"]],false],[0,\\\"\\\\n\\\"],[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,1,[\\\"footer\\\"]],\\\"expected `c.footer` to be a contextual component but found a string. Did you mean `(component c.footer)`? (L4:C11) \\\"],null]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[1,[23,2,[\\\"summary\\\"]],false],[0,\\\"\\\\n          \\\"],[1,[23,2,[\\\"size-select\\\"]],false],[0,\\\"\\\\n\\\"],[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,2,[\\\"pagination-simple\\\"]],\\\"expected `f.pagination-simple` to be a contextual component but found a string. Did you mean `(component f.pagination-simple)`? (L7:C13) \\\"],null]],null,{\\\"statements\\\":[[0,\\\"            \\\"],[7,\\\"a\\\",false],[12,\\\"href\\\",\\\"#\\\"],[12,\\\"class\\\",[22,\\\"gotoBackEnabled:enabled:disabled\\\"]],[3,\\\"action\\\",[[23,0,[]],\\\"gotoFirst\\\"]],[8],[0,\\\"F\\\"],[9],[0,\\\"\\xA0\\\\n            \\\"],[7,\\\"a\\\",false],[12,\\\"href\\\",\\\"#\\\"],[12,\\\"class\\\",[22,\\\"gotoBackEnabled:enabled:disabled\\\"]],[3,\\\"action\\\",[[23,0,[]],\\\"gotoPrev\\\"]],[8],[0,\\\"P\\\"],[9],[0,\\\"\\xA0\\\\n            \\\"],[7,\\\"a\\\",false],[12,\\\"href\\\",\\\"#\\\"],[12,\\\"class\\\",[22,\\\"gotoForwardEnabled:enabled:disabled\\\"]],[3,\\\"action\\\",[[23,0,[]],\\\"gotoNext\\\"]],[8],[0,\\\"N\\\"],[9],[0,\\\"\\xA0\\\\n            \\\"],[7,\\\"a\\\",false],[12,\\\"href\\\",\\\"#\\\"],[12,\\\"class\\\",[22,\\\"gotoForwardEnabled:enabled:disabled\\\"]],[3,\\\"action\\\",[[23,0,[]],\\\"gotoLast\\\"]],[8],[0,\\\"L\\\"],[9],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.navigation.text, 'F P N L', 'Custom labels are used');\n    });\n    (0, _qunit.test)('#grouped-rows #row group value is shown', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByRow.map(r => r.cell.content), data.uniqBy('firstName').mapBy('firstName').sort(), 'grouping rows have valid content');\n    });\n    (0, _qunit.test)('#grouped-rows #row group may be collapsed initially', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      Ember.defineProperty(this, 'collapsedGroupValues', Ember.computed('flag', function () {\n        return Ember.get(this, 'flag') ? Ember.A([_f.firstNames[0]]) : Ember.A([]);\n      }).readOnly());\n      Ember.defineProperty(this, 'selectedItems', Ember.computed('flag', 'data.@each.firstName', function () {\n        return Ember.get(this, 'flag') ? Ember.get(this, 'data').filter((itemn, index) => index % 2 === 0) : Ember.A([]);\n      }).readOnly());\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        flag: true,\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            multipleSelect=true\n            selectedItems=selectedItems\n            collapsedGroupValues=collapsedGroupValues\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"3jAxMJC0\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"groupingRowComponent\\\",\\\"multipleSelect\\\",\\\"selectedItems\\\",\\\"collapsedGroupValues\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],true,[24,[\\\"selectedItems\\\"]],[24,[\\\"collapsedGroupValues\\\"]],[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 50 - data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first grouped value are hidden');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'All rows are shown after second click');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50 - data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first grouped value are hidden (2)');\n      this.set('flag', false);\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'All rows are shown after dropping `collapsedGroupValues`');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleSelection();\n      const rowsInGroup = this.ModelsTablePageObject.getRowsFromGroupRow(0);\n      assert.ok(rowsInGroup.length > 0);\n      assert.ok(rowsInGroup.every(r => r.selected), 'All rows for rows group become selected');\n    });\n    (0, _qunit.test)('#grouped-rows #row grouping-field dropdown has valid options', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: [{\n          value: 'firstName',\n          label: 'F Name'\n        }, {\n          value: 'lastName',\n          label: 'L Name'\n        }],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.groupByFieldOptions.map(o => o.label), ['F Name', 'L Name']);\n    });\n    (0, _qunit.test)('#grouped-rows #row cells have valid colspan', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.ok(this.ModelsTablePageObject.groupingRowsByRow.toArray().every(r => r.cell.colspan === '3'), 'each grouping cell has colspan equal to the table columns count');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(5).click();\n      assert.ok(this.ModelsTablePageObject.groupingRowsByRow.toArray().every(r => r.cell.colspan === '2'), 'one column becomes hidden, so colspan is changed');\n    });\n    (0, _qunit.test)('#grouped-rows #row clicking on grouped values hide grouped', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50 - data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first grouped value are hidden');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'All rows are shown after second click');\n    });\n    (0, _qunit.test)('#grouped-rows #row sorting is done for each group separately', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      const columnToSort = 2;\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(columnToSort).click();\n      data.uniqBy('firstName').sort().forEach((record, index) => {\n        const {\n          first,\n          last\n        } = this.ModelsTablePageObject.getRowsIndexesFromGroupRow(index);\n        const values = this.ModelsTablePageObject.getColumnCells(columnToSort, first, last);\n        assert.deepEqual(Ember.A(values).mapBy('id'), Ember.A([...values].sort()).mapBy('id'), `group #${index} is sorted`);\n      });\n      const wholeColumn = this.ModelsTablePageObject.getColumnCells(columnToSort);\n      assert.notDeepEqual(wholeColumn, [...wholeColumn].sort(), 'Column is not sorted overall (only its part are sorted)');\n    });\n    (0, _qunit.test)('#grouped-rows #row grouped property may be changed', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByRow.map(r => r.cell.content), data.uniqBy('firstName').mapBy('firstName').sort(), 'grouping rows have valid content (firstName)');\n      await this.ModelsTablePageObject.changeGroupByField('lastName');\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByRow.map(r => r.cell.content), data.uniqBy('lastName').mapBy('lastName').sort(), 'grouping rows have valid content (lastName)');\n    });\n    (0, _qunit.test)('#grouped-rows #row order of grouped values may be changed', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByRow.map(r => r.cell.content), data.uniqBy('firstName').mapBy('firstName').sort(), 'grouping rows have valid content (firstName)');\n      await this.ModelsTablePageObject.sortByGroupedBy();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByRow.map(r => r.cell.content), data.uniqBy('firstName').mapBy('firstName').sort().reverse(), 'grouping rows have valid sorted content (firstName)');\n    });\n    (0, _qunit.test)('#grouped-rows #row filtered out groups are hidden', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter(_f.firstNames[0]);\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.length, 1, 'only one group is shown');\n      assert.equal(this.ModelsTablePageObject.rows.length, data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first group are shown');\n    });\n    (0, _qunit.test)('#grouped-rows #row only message about no data is shown if All rows are filtered out', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('some random fake string');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, '1 row is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, 'with 1 cell');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.objectAt(0).content, 'No records to show', 'with correct message');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.length, 0, 'no grouped rows are shown');\n    });\n    (0, _qunit.test)('#grouped-rows #row only message about hidden columns is shown if all columns are hidden', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"J8FONi3e\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, '1 row is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, 'with 1 cell');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).cells.objectAt(0).content.indexOf('All columns are hidden') !== -1, 'with correct message');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.length, 0, 'no grouped rows are shown');\n      assert.equal(this.ModelsTablePageObject.filters.length, 0, 'no filter-th shown');\n      assert.equal(this.ModelsTablePageObject.sorting.length, 0, 'no sorting-th shown');\n    });\n    (0, _qunit.test)('#grouped-rows #row custom group-cell component content', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName=\"firstName\"\n            displayGroupedValueAs=\"row\"\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"1eXAVXI2\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"groupingRowComponent\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"row\\\",[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const fNamesCount = data.filterBy('firstName', _f.firstNames[0]).length;\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleText, `firstName: ${_f.firstNames[0]} (${fNamesCount}). expanded`, 'custom component content is valid');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleGroup();\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleText, `firstName: ${_f.firstNames[0]} (${fNamesCount}). collapsed`, 'custom component content is updated');\n      await this.ModelsTablePageObject.changeGroupByField('lastName');\n      const lNamesCount = data.filterBy('lastName', _f.lastNames[0]).length;\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleText, `lastName: ${_f.lastNames[0]} (${lNamesCount}). expanded`, 'custom component content is updated (2)');\n    });\n    (0, _qunit.test)('#grouped-rows #row custom group-cell component actions', async function (assert) {\n      assert.expect(10);\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n\n      this.actions.displayDataChanged = function () {\n        assert.ok(true);\n      };\n\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            expandedRowComponent=(component \"expanded-row\")\n            displayGroupedValueAs='row'\n            multipleSelect=true\n            multipleExpand=true\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            pageSize=50\n            displayDataChangedAction=(action \"displayDataChanged\")\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"pxyxN85g\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"expandedRowComponent\\\",\\\"displayGroupedValueAs\\\",\\\"multipleSelect\\\",\\\"multipleExpand\\\",\\\"groupingRowComponent\\\",\\\"pageSize\\\",\\\"displayDataChangedAction\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",[28,\\\"component\\\",[\\\"expanded-row\\\"],null],\\\"row\\\",true,true,[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],50,[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null],[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const firstGroupRowsCount = this.ModelsTablePageObject.getRowsFromGroupRow(0).length;\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupRow(0).every(r => !r.selected), 'All rows for rows group are not selected by default');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.selectedCountText, '0');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleSelection();\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupRow(0).every(r => r.selected), 'All rows for rows group become selected');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.selectedCountText, firstGroupRowsCount);\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupRow(0).every(r => !r.expanded), 'All rows for rows group are not expanded by default');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.expandedCountText, '0');\n      await this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.toggleExpands();\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupRow(0).every(r => r.expanded), 'All rows for rows group become expanded');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByRow.objectAt(0).cell.expandedCountText, firstGroupRowsCount);\n    });\n    (0, _qunit.test)('#grouped-rows #row component for group summary', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            groupSummaryRowComponent=(component \"group-summary-row\")\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"AdFzUKJ5\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"groupSummaryRowComponent\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",[28,\\\"component\\\",[\\\"group-summary-row\\\"],null],\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const groupRows = this.ModelsTablePageObject.getRowsFromGroupRow(0);\n      const rowsInGroup = data.filterBy('firstName', _f.firstNames[0]);\n      assert.equal(groupRows.length, rowsInGroup.length + 1, 'rows for first group are shown with summary row');\n      const firstGroupRowCell = groupRows[groupRows.length - 1].cells.objectAt(0);\n      assert.equal(firstGroupRowCell.groupSummaryVisible, rowsInGroup.length, 'visible rows are bound correctly');\n      assert.equal(firstGroupRowCell.groupSummarySelected, 0, 'selected rows are bound correctly');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.equal(firstGroupRowCell.groupSummarySelected, 1, 'selected rows are bound correctly (2)');\n    });\n    (0, _qunit.test)('#grouped-rows #column group value is shown', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.toArray().mapBy('content'), data.uniqBy('firstName').mapBy('firstName').sort(), 'grouping cell have valid content');\n    });\n    (0, _qunit.test)('#grouped-rows #column group may be collapsed initially', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      Ember.defineProperty(this, 'collapsedGroupValues', Ember.computed('flag', function () {\n        return Ember.get(this, 'flag') ? Ember.A([_f.firstNames[0]]) : Ember.A([]);\n      }).readOnly());\n      Ember.defineProperty(this, 'selectedItems', Ember.computed('flag', 'data.@each.firstName', function () {\n        return Ember.get(this, 'flag') ? Ember.get(this, 'data').filter((itemn, index) => index % 2 === 0) : Ember.A([]);\n      }).readOnly());\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        flag: true,\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            selectedItems=selectedItems\n            pageSize=50\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            multipleSelect=true\n            collapsedGroupValues=collapsedGroupValues\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"4RJukKEW\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"selectedItems\\\",\\\"pageSize\\\",\\\"groupingRowComponent\\\",\\\"multipleSelect\\\",\\\"collapsedGroupValues\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",[24,[\\\"selectedItems\\\"]],50,[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],true,[24,[\\\"collapsedGroupValues\\\"]],[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 50 - data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first grouped value are hidden');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'All rows are shown after second click');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50 - data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first grouped value are hidden (2)');\n      this.set('flag', false);\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'All rows are shown after dropping `collapsedGroupValues`');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleSelection();\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupColumn(0).every(r => r.selected), 'All rows for rows group become selected');\n    });\n    (0, _qunit.test)('#grouped-rows #column grouping-field dropdown has valid options', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: [{\n          value: 'firstName',\n          label: 'F Name'\n        }, {\n          value: 'lastName',\n          label: 'L Name'\n        }],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.groupByFieldOptions.map(o => o.label), ['F Name', 'L Name']);\n    });\n    (0, _qunit.test)('#grouped-rows #column cells have valid rowspan', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const rowspans = data.uniqBy('firstName').sort().map((record, index) => {\n        const {\n          first,\n          last\n        } = this.ModelsTablePageObject.getRowsIndexesFromGroupColumn(index);\n        return String(last - first + 1);\n      });\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.toArray().mapBy('rowspan'), rowspans, 'each grouping cell has rowspan equal to the group rows count');\n      assert.ok(this.ModelsTablePageObject.groupingRowsByRow.toArray().every(r => r.cell.colspan === '2'), 'one column becomes hidden, so colspan is changed');\n    });\n    (0, _qunit.test)('#grouped-rows #column clicking on grouped values hide grouped', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50 - data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first grouped value are hidden');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleGroup();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'All rows are shown after second click');\n    });\n    (0, _qunit.test)('#grouped-rows #column sorting is done for each group separately', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      const columnToSort = 3;\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.sorting.objectAt(columnToSort).click();\n      data.uniqBy('firstName').forEach((name, index) => {\n        const {\n          first,\n          last\n        } = this.ModelsTablePageObject.getRowsIndexesFromGroupColumn(index);\n        const values = this.ModelsTablePageObject.getColumnCells(-1, first, last);\n        assert.deepEqual(values, [...values].sort(), `group #${index} is sorted`);\n      });\n      const wholeColumn = this.ModelsTablePageObject.getColumnCells(-1);\n      assert.notDeepEqual(wholeColumn, [...wholeColumn].sort(), 'Column is not sorted overall (only its part are sorted)');\n    });\n    (0, _qunit.test)('#grouped-rows #column grouped property may be changed', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.map(r => r.content), data.uniqBy('firstName').mapBy('firstName').sort(), 'grouping columns have valid content (firstName)');\n      await this.ModelsTablePageObject.changeGroupByField('lastName');\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.map(r => r.content), data.uniqBy('lastName').mapBy('lastName').sort(), 'grouping columns have valid content (lastName)');\n    });\n    (0, _qunit.test)('#grouped-rows #column order of grouped values may be changed', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.map(r => r.content), data.uniqBy('firstName').mapBy('firstName').sort(), 'grouping columns have valid content (firstName)');\n      await this.ModelsTablePageObject.sortByGroupedBy();\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.map(r => r.content), data.uniqBy('firstName').mapBy('firstName').sort().reverse(), 'grouping columns have valid sorted content (firstName)');\n    });\n    (0, _qunit.test)('#grouped-rows #column filtered out groups are hidden', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter(_f.firstNames[0]);\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.length, 1, 'only one group is shown');\n      assert.equal(this.ModelsTablePageObject.rows.length, data.filterBy('firstName', _f.firstNames[0]).length, 'rows for first group are shown');\n    });\n    (0, _qunit.test)('#grouped-rows #column only message about no data is shown if All rows are filtered out', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.doGlobalFilter('some random fake string');\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, '1 row is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, 'with 1 cell');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.objectAt(0).content, 'No records to show', 'with correct message');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.length, 0, 'no grouped rows are shown');\n    });\n    (0, _qunit.test)('#grouped-rows #column only message about hidden columns is shown if all columns are hidden', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"XmYahqFT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(1).click();\n      assert.equal(this.ModelsTablePageObject.rows.length, 1, '1 row is shown');\n      assert.equal(this.ModelsTablePageObject.rows.objectAt(0).cells.length, 1, 'with 1 cell');\n      assert.ok(this.ModelsTablePageObject.rows.objectAt(0).cells.objectAt(0).content.indexOf('All columns are hidden') !== -1, 'with correct message');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.length, 0, 'no grouped rows are shown');\n      assert.equal(this.ModelsTablePageObject.filters.length, 0, 'no filter-th shown');\n      assert.equal(this.ModelsTablePageObject.sorting.length, 0, 'no sorting-th shown');\n    });\n    (0, _qunit.test)('#grouped-rows #column row expands update rowspan for grouping cells', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      columns.splice(0, 0, {\n        component: 'expand-toggle',\n        mayBeHidden: false\n      });\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties\n            expandedRowComponent=(component \"expanded-row\")\n            multipleExpand=true}}\n      */\n      {\n        id: \"Hw6PBFx0\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\",\\\"expandedRowComponent\\\",\\\"multipleExpand\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]],[28,\\\"component\\\",[\\\"expanded-row\\\"],null],true]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const firstGroupRowspan = data.filterBy('firstName', _f.firstNames[0]).length;\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).rowspan, String(firstGroupRowspan), 'rows are collapsed');\n      await this.ModelsTablePageObject.rows.objectAt(0).expand();\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).rowspan, String(firstGroupRowspan + 1), 'rowspan is updated after first row becomes expanded');\n      await this.ModelsTablePageObject.rows.objectAt(0).collapse();\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).rowspan, String(firstGroupRowspan), 'rowspan is set to its default value');\n    });\n    (0, _qunit.test)('#grouped-rows #column thead has extra cell in the each row', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        groupedHeaders: [[{\n          title: 'BigTitle',\n          colspan: 3\n        }], [{\n          title: 'SubTitle1',\n          colspan: 2\n        }, {\n          title: 'SubTitle2',\n          colspan: 1\n        }]],\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            pageSize=50\n            groupedHeaders=groupedHeaders\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"yD8JJeY3\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"groupedHeaders\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",50,[24,[\\\"groupedHeaders\\\"]],[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.headers.length, 4, '4 rows in the header');\n      assert.equal(this.ModelsTablePageObject.headers.objectAt(0).cells.length, 2, 'first row has 2 cells');\n      assert.equal(this.ModelsTablePageObject.headers.objectAt(1).cells.length, 3, 'second row has 3 cells');\n      assert.equal(this.ModelsTablePageObject.headers.objectAt(2).cells.length, 4, 'third row has 4 cells');\n      assert.equal(this.ModelsTablePageObject.headers.objectAt(2).cells[0], 'First name', 'Cell contains property name used to group rows');\n      assert.equal(this.ModelsTablePageObject.headers.objectAt(3).cells.length, 4, 'fourth row has 4 cells');\n    });\n    (0, _qunit.test)('#grouped-rows #column custom component for header cell', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            groupHeaderCellComponent=(component \"group-header-cell\")\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"jCxdeN1I\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"groupingRowComponent\\\",\\\"groupHeaderCellComponent\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],[28,\\\"component\\\",[\\\"group-header-cell\\\"],null],50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.headers.objectAt(0).cells[0], '~firstName~', 'Cell contains property name used to group rows wrapped with ~');\n    });\n    (0, _qunit.test)('#grouped-rows #column custom group-cell component content', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            displayGroupedValueAs='column'\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"VzU+jbjC\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"groupingRowComponent\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",\\\"column\\\",[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const fNamesCount = data.filterBy('firstName', _f.firstNames[0]).length;\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleText, `firstName: ${_f.firstNames[0]} (${fNamesCount}). expanded`, 'custom component content is valid');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleGroup();\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleText, `firstName: ${_f.firstNames[0]} (${fNamesCount}). collapsed`, 'custom component content is updated');\n      await this.ModelsTablePageObject.changeGroupByField('lastName');\n      const lNamesCount = data.filterBy('lastName', _f.lastNames[0]).length;\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleText, `lastName: ${_f.lastNames[0]} (${lNamesCount}). expanded`, 'custom component content is updated (2)');\n    });\n    (0, _qunit.test)('#grouped-rows #column custom group-cell component actions', async function (assert) {\n      assert.expect(10);\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n\n      this.actions.displayDataChanged = function () {\n        assert.ok(true);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName=\"firstName\"\n            expandedRowComponent=(component \"expanded-row\")\n            displayGroupedValueAs='row'\n            multipleSelect=true\n            multipleExpand=true\n            groupingRowComponent=(component \"custom-row-group-toggle\")\n            pageSize=50\n            displayDataChangedAction=(action \"displayDataChanged\")\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"pxyxN85g\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"expandedRowComponent\\\",\\\"displayGroupedValueAs\\\",\\\"multipleSelect\\\",\\\"multipleExpand\\\",\\\"groupingRowComponent\\\",\\\"pageSize\\\",\\\"displayDataChangedAction\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",[28,\\\"component\\\",[\\\"expanded-row\\\"],null],\\\"row\\\",true,true,[28,\\\"component\\\",[\\\"custom-row-group-toggle\\\"],null],50,[28,\\\"action\\\",[[23,0,[]],\\\"displayDataChanged\\\"],null],[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const firstGroupRowsCount = this.ModelsTablePageObject.getRowsFromGroupColumn(0).length;\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupColumn(0).every(r => !r.selected), 'All rows for rows group are not selected by default');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).selectedCountText, '0');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleSelection();\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupColumn(0).every(r => r.selected), 'All rows for rows group become selected');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).selectedCountText, firstGroupRowsCount);\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupColumn(0).every(r => !r.expanded), 'All rows for rows group are not expanded by default');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).expandedCountText, '0');\n      await this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).toggleExpands();\n      assert.ok(this.ModelsTablePageObject.getRowsFromGroupColumn(0).every(r => r.expanded), 'All rows for rows group become expanded');\n      assert.equal(this.ModelsTablePageObject.groupingRowsByColumn.objectAt(0).expandedCountText, firstGroupRowsCount);\n    });\n    (0, _qunit.test)('#grouped-rows #column component for group summary', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['firstName', 'lastName'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='firstName'\n            groupSummaryRowComponent=(component \"group-summary-row\")\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"5D4wSW0i\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"groupSummaryRowComponent\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"firstName\\\",[28,\\\"component\\\",[\\\"group-summary-row\\\"],null],\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      const groupRows = this.ModelsTablePageObject.getRowsFromGroupColumn(0);\n      const rowsInGroup = data.filterBy('firstName', _f.firstNames[0]);\n      assert.equal(groupRows.length, rowsInGroup.length, 'rows for first group are shown with summary row');\n      const firstGroupRowCell = this.ModelsTablePageObject.rows[groupRows.length].cells.objectAt(1);\n      assert.equal(firstGroupRowCell.groupSummaryVisible, rowsInGroup.length, 'visible rows are bound correctly');\n      assert.equal(firstGroupRowCell.groupSummarySelected, 0, 'selected rows are bound correctly');\n      await this.ModelsTablePageObject.rows.objectAt(0).click();\n      assert.equal(firstGroupRowCell.groupSummarySelected, 1, 'selected rows are bound correctly (2)');\n    });\n    (0, _qunit.test)('#in-line edit: row is editable, column displays default edit component', async function (assert) {\n      assert.expect(13);\n      this.owner.register('component:stub-comp-edit', Ember.Component.extend({\n        classNames: ['cellInput'],\n        layout: Ember.HTMLBars.template(\n        /*\n          {{get record propertyName}}\n        */\n        {\n          id: \"NtQK5z7u\",\n          block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"get\\\",[[24,[\\\"record\\\"]],[24,[\\\"propertyName\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n          meta: {}\n        })\n      }));\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName']);\n      columns[0].editable = false; // Index is not editable\n\n      columns[1].componentForEdit = 'stub-comp-edit'; // Index is not editable\n\n      this.setProperties({\n        data: (0, _f.generateContent)(5, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table data=data columns=columns as |c|}}\n              {{#c.table as |table|}}\n                {{#table.body as |body|}}\n                  {{#each body.visibleContent as |record index|}}\n                    {{#body.row record=record index=index as |row|}}\n                        <div class=\"isEditRow\">{{if row.isEditRow \"yes\" \"no\"}}</div>\n                        <div class=\"actionEdit\" {{action row.editRow}}>Edit</div>\n                        <div class=\"actionSave\" {{action row.saveRow}}>Save</div>\n                        <div class=\"actionCancel\" {{action row.cancelEditRow}}>Cancel</div>\n                      {{#each row.visibleProcessedColumns as |column|}}\n                        {{component row.cell class=\"cell\" index=index column=column}}\n                      {{/each}}\n                    {{/body.row}}\n                  {{/each}}\n                {{/table.body}}\n              {{/c.table}}\n            {{/models-table}}\n          \n      */\n      {\n        id: \"tOvpt/h4\",\n        block: \"{\\\"symbols\\\":[\\\"c\\\",\\\"table\\\",\\\"body\\\",\\\"record\\\",\\\"index\\\",\\\"row\\\",\\\"column\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]],{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,1,[\\\"table\\\"]],\\\"expected `c.table` to be a contextual component but found a string. Did you mean `(component c.table)`? (L3:C11) \\\"],null]],null,{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,2,[\\\"body\\\"]],\\\"expected `table.body` to be a contextual component but found a string. Did you mean `(component table.body)`? (L4:C13) \\\"],null]],null,{\\\"statements\\\":[[4,\\\"each\\\",[[23,3,[\\\"visibleContent\\\"]]],null,{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,3,[\\\"row\\\"]],\\\"expected `body.row` to be a contextual component but found a string. Did you mean `(component body.row)`? (L6:C17) \\\"],null]],[[\\\"record\\\",\\\"index\\\"],[[23,4,[]],[23,5,[]]]],{\\\"statements\\\":[[0,\\\"                  \\\"],[7,\\\"div\\\",true],[10,\\\"class\\\",\\\"isEditRow\\\"],[8],[1,[28,\\\"if\\\",[[23,6,[\\\"isEditRow\\\"]],\\\"yes\\\",\\\"no\\\"],null],false],[9],[0,\\\"\\\\n                  \\\"],[7,\\\"div\\\",false],[12,\\\"class\\\",\\\"actionEdit\\\"],[3,\\\"action\\\",[[23,0,[]],[23,6,[\\\"editRow\\\"]]]],[8],[0,\\\"Edit\\\"],[9],[0,\\\"\\\\n                  \\\"],[7,\\\"div\\\",false],[12,\\\"class\\\",\\\"actionSave\\\"],[3,\\\"action\\\",[[23,0,[]],[23,6,[\\\"saveRow\\\"]]]],[8],[0,\\\"Save\\\"],[9],[0,\\\"\\\\n                  \\\"],[7,\\\"div\\\",false],[12,\\\"class\\\",\\\"actionCancel\\\"],[3,\\\"action\\\",[[23,0,[]],[23,6,[\\\"cancelEditRow\\\"]]]],[8],[0,\\\"Cancel\\\"],[9],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[23,6,[\\\"visibleProcessedColumns\\\"]]],null,{\\\"statements\\\":[[0,\\\"                  \\\"],[1,[28,\\\"component\\\",[[23,6,[\\\"cell\\\"]]],[[\\\"class\\\",\\\"index\\\",\\\"column\\\"],[\\\"cell\\\",[23,5,[]],[23,7,[]]]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[7]},null]],\\\"parameters\\\":[6]},null]],\\\"parameters\\\":[4,5]},null]],\\\"parameters\\\":[3]},null]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.querySelector('.isEditRow').textContent, 'no', 'Row is not editable');\n      assert.equal(this.element.querySelectorAll('input').length, 0, 'There are no input fields');\n      assert.equal(this.element.querySelectorAll('.cellInput').length, 0, 'There are no custom input fields');\n      await (0, _testHelpers.click)('.actionEdit');\n      assert.equal(this.element.querySelector('.isEditRow').textContent, 'yes', 'Row is editable');\n      assert.equal(this.element.querySelectorAll('input').length, 1, 'There are input fields');\n      assert.equal(this.element.querySelectorAll('.cellInput').length, 1, 'Uses a custom Edit component');\n      await (0, _testHelpers.click)('.actionCancel');\n      assert.equal(this.element.querySelector('.isEditRow').textContent, 'no', 'Row is not editable');\n      assert.equal(this.element.querySelectorAll('input').length, 0, 'There are no input fields');\n      assert.equal(this.element.querySelectorAll('.cellInput').length, 0, 'There are no custom input fields');\n      await (0, _testHelpers.click)('.actionEdit');\n      assert.equal(this.element.querySelector('.isEditRow').textContent, 'yes', 'Row is editable');\n      await (0, _testHelpers.click)('.actionSave');\n      assert.equal(this.element.querySelector('.isEditRow').textContent, 'no', 'Row is not editable');\n      assert.equal(this.element.querySelectorAll('input').length, 0, 'There are no input fields');\n      assert.equal(this.element.querySelectorAll('.cellInput').length, 0, 'There are no custom input fields');\n    });\n    (0, _qunit.test)('#publicAPI: publicAPI is accessible ', async function (assert) {\n      assert.expect(3);\n      const columns = (0, _f.generateColumns)(['index', 'someWord']);\n      columns[1].componentForFilterCell = 'filter-cell-input';\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table data=data columns=columns as |mt|}}\n              <div class=\"records-count\">{{mt.publicAPI.recordsCount}}</div>\n              {{mt.table}}\n            {{/models-table}}\n          \n      */\n      {\n        id: \"WIin8amK\",\n        block: \"{\\\"symbols\\\":[\\\"mt\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[7,\\\"div\\\",true],[10,\\\"class\\\",\\\"records-count\\\"],[8],[1,[23,1,[\\\"publicAPI\\\",\\\"recordsCount\\\"]],false],[9],[0,\\\"\\\\n        \\\"],[1,[23,1,[\\\"table\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.querySelector('.records-count').textContent, '10', 'records count is accessible');\n      await this.ModelsTablePageObject.filters.objectAt(1).inputFilter('one');\n      assert.equal(this.element.querySelector('.records-count').textContent, '1', 'records count is updated');\n      await this.ModelsTablePageObject.filters.objectAt(1).clearFilter();\n      assert.equal(this.element.querySelector('.records-count').textContent, '10', 'records count is restored');\n    });\n    (0, _qunit.test)('#292 rows grouping doesn\\'t work if grouped values are not strings #row', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName', 'age']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['age'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='age'\n            displayGroupedValueAs='row'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"0Pv0+BjF\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"age\\\",\\\"row\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByRow.map(r => r.cell.content), data.uniqBy('age').map(item => `${item.age}`).sort(), 'grouping rows have valid content');\n    });\n    (0, _qunit.test)('#292 rows grouping doesn\\'t work if grouped values are not strings #column', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'firstName', 'lastName', 'age']);\n      const data = (0, _f.generateContent)(50, 1);\n      this.setProperties({\n        dataGroupProperties: ['age'],\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns\n            useDataGrouping=true\n            currentGroupingPropertyName='age'\n            displayGroupedValueAs='column'\n            pageSize=50\n            dataGroupProperties=dataGroupProperties}}\n      */\n      {\n        id: \"dmkkXeW5\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\",\\\"useDataGrouping\\\",\\\"currentGroupingPropertyName\\\",\\\"displayGroupedValueAs\\\",\\\"pageSize\\\",\\\"dataGroupProperties\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]],true,\\\"age\\\",\\\"column\\\",50,[24,[\\\"dataGroupProperties\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.rows.length, 50, 'table has 50 rows with data');\n      assert.deepEqual(this.ModelsTablePageObject.groupingRowsByColumn.toArray().mapBy('content'), data.uniqBy('age').map(item => `${item.age}`).sort(), 'grouping cell have valid content');\n    });\n    (0, _qunit.test)('component in the table-footer cells', async function (assert) {\n      const columns = (0, _f.generateColumns)(['age', 'index']);\n      columns[0].componentForFooterCell = 'models-table/cell-column-summary';\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(this.ModelsTablePageObject.footer.cells.mapBy('isComponent'), [true, false], 'tfoot first cell has a component inside');\n    });\n    (0, _qunit.test)('custom colspan for header cells', async function (assert) {\n      const columns = (0, _f.generateColumns)(['age', 'index', 'index2', 'indexWithHtml', 'firstName', 'lastName']);\n      columns[1].colspanForFilterCell = 3;\n      columns[1].colspanForSortCell = 3;\n      this.setProperties({\n        data: (0, _f.generateContent)(10, 1),\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table\n            data=data\n            columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.sorting.length, columns.length - 2, 'sorting row hash a correct columns number');\n      assert.equal(this.ModelsTablePageObject.filters.length, columns.length - 2, 'Filtering row hash a correct columns number');\n      assert.equal(this.ModelsTablePageObject.sorting.objectAt(1).colspan, 3, 'Colspan for second sort-cell is 3');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).colspan, 3, 'Colspan for second filter-cell is 3');\n      await this.ModelsTablePageObject.toggleColumnDropDown();\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(6).click(); // hide third column in the colspan\n\n      assert.equal(this.ModelsTablePageObject.sorting.objectAt(1).colspan, 2, 'Colspan for second sort-cell is 2');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).colspan, 2, 'Colspan for second filter-cell is 2');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(5).click(); // hide second column in the colspan\n\n      assert.equal(this.ModelsTablePageObject.sorting.objectAt(1).colspan, 1, 'Colspan for second sort-cell is 1');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).colspan, 1, 'Colspan for second filter-cell is 1');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(4).click(); // hide first column in the colspan\n\n      assert.equal(this.ModelsTablePageObject.sorting.length, columns.length - 3, 'sorting row hash a correct columns number (2)');\n      assert.equal(this.ModelsTablePageObject.filters.length, columns.length - 3, 'Filtering row hash a correct columns number (2)');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(5).click(); // show second column in the colspan\n\n      assert.equal(this.ModelsTablePageObject.sorting.length, columns.length - 2, 'sorting row hash a correct columns number (3)');\n      assert.equal(this.ModelsTablePageObject.filters.length, columns.length - 2, 'Filtering row hash a correct columns number (3)');\n      await this.ModelsTablePageObject.columnsDropDown.objectAt(6).click(); // show third column in the colspan\n\n      assert.equal(this.ModelsTablePageObject.sorting.objectAt(1).colspan, 2, 'Colspan for second sort-cell is 2');\n      assert.equal(this.ModelsTablePageObject.filters.objectAt(1).colspan, 2, 'Colspan for second filter-cell is 2');\n    });\n    (0, _qunit.test)('#325 toggle all selected works', async function (assert) {\n      const columns = (0, _f.generateColumns)(['age', 'index']);\n      const owner = Ember.get(this, 'owner');\n      owner.register('model:test325', _emberData.default.Model.extend({}));\n      const store = owner.lookup('service:store');\n      store.createRecord('test325', {});\n      columns.unshiftObject({\n        component: 'select-row-checkbox',\n        useFilter: false,\n        mayBeHidden: false,\n        componentForSortCell: 'select-all-rows-checkbox'\n      });\n      this.setProperties({\n        data: store.peekAll('test325'),\n        // data must be a result from `store` (peekAll, findAll, query - what ever)\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await this.ModelsTablePageObject.toggleAllSelection();\n      assert.equal(this.ModelsTablePageObject.rows.filter(r => r.selected).length, 1, 'All rows are selected');\n      await this.ModelsTablePageObject.toggleAllSelection();\n      assert.equal(this.ModelsTablePageObject.rows.filter(r => r.selected).length, 0, 'All rows are not selected');\n    });\n    (0, _qunit.test)('#342 properly destroy columns when models-table is destroyed', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index']);\n      columns[0].filterWithSelect = true;\n      columns[0].sortFilterOptions = true;\n      const data = (0, _f.generateContent)(10);\n      this.setProperties({\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await (0, _testHelpers.clearRender)();\n      Ember.run(() => Ember.set(data[0], 'index', 100500));\n      assert.ok(true);\n    });\n    (0, _qunit.test)('A11y', async function (assert) {\n      const columns = (0, _f.generateColumns)(['index', 'reversedIndex']);\n      columns[0].filterWithSelect = true;\n      const data = (0, _f.generateContent)(10);\n      this.setProperties({\n        data,\n        columns\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table data=data columns=columns}}\n      */\n      {\n        id: \"1dKzPSCh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      await (0, _audit.default)('.models-table-wrapper');\n      assert.ok(true, 'no a11y errors found');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/cell-content-display-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/cell content display', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      this.setProperties({\n        record: {\n          title: 'Hello'\n        },\n        column: {\n          propertyName: 'title'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/cell-content-display record=record column=column}}\n      */\n      {\n        id: \"8V4m+bIY\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table/cell-content-display\\\",null,[[\\\"record\\\",\\\"column\\\"],[[24,[\\\"record\\\"]],[24,[\\\"column\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), this.get('record.title'));\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/cell-content-edit-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/cell content edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      this.setProperties({\n        record: {\n          title: 'Hello'\n        },\n        column: {\n          propertyName: 'title'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/cell-content-edit record=record column=column}}\n      */\n      {\n        id: \"EFnRaRKa\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table/cell-content-edit\\\",null,[[\\\"record\\\",\\\"column\\\"],[[24,[\\\"record\\\"]],[24,[\\\"column\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.querySelector('input').value, this.get('record.title'));\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/cell-edit-toggle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/cell edit toggle', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(async function (assert) {\n      this.setProperties({\n        record: {},\n        isEditRow: false,\n        actions: {\n          // methods provided by the grid\n          editRow: () => {\n            Ember.set(this, 'isEditRow', true);\n            assert.ok(true, 'Edit Row Action was called');\n          },\n          cancelEditRow: () => {\n            Ember.set(this, 'isEditRow', false);\n            assert.ok(true, 'Cancel Edit Row Action was called');\n          },\n          saveRow: () => {\n            Ember.set(this, 'isEditRow', false);\n            assert.ok(true, 'Save Row Action was called');\n          },\n          // methods provided by user of component\n          onSave: () => {\n            assert.ok(true, 'onSave Action was called');\n            return Ember.get(this, 'saveReturn');\n          },\n          onEdit: () => {\n            assert.ok(true, 'onEdit Action was called');\n            return Ember.get(this, 'editReturn');\n          },\n          onCancel: () => {\n            assert.ok(true, 'onCancel Action was called');\n            return Ember.get(this, 'cancelReturn');\n          }\n        },\n        // Test Properties\n        editReturn: true,\n        saveReturn: true,\n        cancelReturn: true\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/cell-edit-toggle\n            record=record\n            editRow=(action \"editRow\")\n            cancelEditRow=(action \"cancelEditRow\")\n            saveRow=(action \"saveRow\")\n            isEditRow=isEditRow\n            saveRowAction=(action \"onSave\")\n            editRowAction=(action \"onEdit\")\n            cancelRowAction=(action \"onCancel\")\n          }}\n      */\n      {\n        id: \"hiJBETnS\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"models-table/cell-edit-toggle\\\",null,[[\\\"record\\\",\\\"editRow\\\",\\\"cancelEditRow\\\",\\\"saveRow\\\",\\\"isEditRow\\\",\\\"saveRowAction\\\",\\\"editRowAction\\\",\\\"cancelRowAction\\\"],[[24,[\\\"record\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"editRow\\\"],null],[28,\\\"action\\\",[[23,0,[]],\\\"cancelEditRow\\\"],null],[28,\\\"action\\\",[[23,0,[]],\\\"saveRow\\\"],null],[24,[\\\"isEditRow\\\"]],[28,\\\"action\\\",[[23,0,[]],\\\"onSave\\\"],null],[28,\\\"action\\\",[[23,0,[]],\\\"onEdit\\\"],null],[28,\\\"action\\\",[[23,0,[]],\\\"onCancel\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n    });\n    (0, _qunit.test)('Enters / Exits Edit Mode correctly', function (assert) {\n      assert.expect(13);\n      let buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Only Edit button is displayed'); // Click the Edit button to enter Edit Mode\n\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Only Save Cancel buttons are displayed'); // Click the Cancel button to exit Edit Mode\n\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Cancel exited edit mode'); // Click the Edit button to enter Edit Mode\n\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Only Save Cancel buttons are displayed'); // Click the Save button to exit Edit Mode\n\n      buttons[1].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Save exited edit mode');\n    });\n    (0, _qunit.test)('Action only progress on truthy values', function (assert) {\n      assert.expect(10);\n      let buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Only Edit button is displayed'); // Click the Edit button to enter Edit Mode\n\n      Ember.set(this, 'editReturn', false);\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Edit Button did not Progress');\n      Ember.set(this, 'editReturn', true);\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Edit Button Progresses');\n      Ember.set(this, 'cancelReturn', false);\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Cancel Button did not progress'); // Click the Save button to exit Edit Mode\n\n      Ember.set(this, 'saveReturn', false);\n      buttons[1].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Save Button did not progress');\n    });\n    (0, _qunit.test)('Action only progress on truthy values', function (assert) {\n      assert.expect(10);\n      let buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Only Edit button is displayed'); // Click the Edit button to enter Edit Mode\n\n      Ember.set(this, 'editReturn', false);\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Edit Button did not Progress');\n      Ember.set(this, 'editReturn', true);\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Edit Button Progresses');\n      Ember.set(this, 'cancelReturn', false);\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Cancel Button did not progress'); // Click the Save button to exit Edit Mode\n\n      Ember.set(this, 'saveReturn', false);\n      buttons[1].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Save Button did not progress');\n    });\n    (0, _qunit.test)('Actions accept promises', function (assert) {\n      assert.expect(10);\n      let buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Only Edit button is displayed'); // Click the Edit button to enter Edit Mode\n\n      Ember.set(this, 'editReturn', Ember.RSVP.resolve(false));\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 1, 'Edit Button did not Progress');\n      Ember.set(this, 'editReturn', Ember.RSVP.resolve(true));\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Edit Button Progresses');\n      Ember.set(this, 'cancelReturn', Ember.RSVP.resolve(false));\n      buttons[0].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Cancel Button did not progress'); // Click the Save button to exit Edit Mode\n\n      Ember.set(this, 'saveReturn', Ember.RSVP.resolve(false));\n      buttons[1].click();\n      buttons = this.element.querySelectorAll('button');\n      assert.equal(buttons.length, 2, 'Save Button did not progress');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/cell}}\n      */\n      {\n        id: \"3SpJhUQK\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/cell\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/cell}}\n              template block text\n            {{/models-table/cell}}\n          \n      */\n      {\n        id: \"umsytV/8\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/data-group-by-select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/data group by select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', function (assert) {\n      assert.ok(true);\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/group-summary-row-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models-table/group-summary-row', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/group-summary-row}}\n      */\n      {\n        id: \"4yrpaPrL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/group-summary-row\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/group-summary-row}}\n              template block text\n            {{/models-table/group-summary-row}}\n          \n      */\n      {\n        id: \"WK+SgkV5\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/group-summary-row\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/page-size-select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/initializers/ember-cli-mirage\", \"dummy/tests/helpers/f\", \"dummy/tests/helpers/get-page-object\"], function (_qunit, _emberQunit, _testHelpers, _emberCliMirage, _f, _getPageObject) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/page size select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.ModelsTablePageObject = (0, _getPageObject.default)(this);\n      this.server = (0, _emberCliMirage.startMirage)();\n      this.server.createList('user', 100);\n      this.setProperties({\n        data: this.server.db.users,\n        columns: (0, _f.generateColumns)(['index'])\n      });\n    });\n    hooks.afterEach(function () {\n      this.server.shutdown();\n    });\n    (0, _qunit.test)('dropdown is shown', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n          {{#models-table data=data columns=columns as |mt|}}\n            {{mt.table}}\n            {{#mt.footer as |footer|}}\n              {{footer.size-select}}\n            {{/mt.footer}}\n          {{/models-table}}\n      */\n      {\n        id: \"1Q7qrhJq\",\n        block: \"{\\\"symbols\\\":[\\\"mt\\\",\\\"footer\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[23,1,[\\\"table\\\"]],false],[0,\\\"\\\\n\\\"],[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,1,[\\\"footer\\\"]],\\\"expected `mt.footer` to be a contextual component but found a string. Did you mean `(component mt.footer)`? (L4:C9) \\\"],null]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[1,[23,2,[\\\"size-select\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.pageSize, '10');\n      await this.ModelsTablePageObject.changePageSize(25);\n      assert.equal(this.ModelsTablePageObject.rows.length, 25);\n      this.set('data', this.server.db.users.slice(0, 15));\n      assert.equal(this.ModelsTablePageObject.pageSize, '25');\n      assert.equal(this.ModelsTablePageObject.rows.length, 15);\n    });\n    (0, _qunit.test)('dropdown is shown (2)', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n          {{#models-table data=data columns=columns as |mt|}}\n            {{mt.table}}\n            {{#mt.footer as |footer|}}\n              {{#footer.size-select as |s|}}\n                {{s.select}}\n              {{/footer.size-select}}\n            {{/mt.footer}}\n          {{/models-table}}\n      */\n      {\n        id: \"Uc5sxv22\",\n        block: \"{\\\"symbols\\\":[\\\"mt\\\",\\\"footer\\\",\\\"s\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[23,1,[\\\"table\\\"]],false],[0,\\\"\\\\n\\\"],[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,1,[\\\"footer\\\"]],\\\"expected `mt.footer` to be a contextual component but found a string. Did you mean `(component mt.footer)`? (L4:C9) \\\"],null]],null,{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,2,[\\\"size-select\\\"]],\\\"expected `footer.size-select` to be a contextual component but found a string. Did you mean `(component footer.size-select)`? (L5:C11) \\\"],null]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[1,[23,3,[\\\"select\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[3]},null]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.ModelsTablePageObject.pageSize, '10');\n      await this.ModelsTablePageObject.changePageSize(25);\n      assert.equal(this.ModelsTablePageObject.rows.length, 25);\n      this.set('data', this.server.db.users.slice(0, 15));\n      assert.equal(this.ModelsTablePageObject.pageSize, '25');\n      assert.equal(this.ModelsTablePageObject.rows.length, 15);\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/pagination-numeric-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/pages/models-table-bs\", \"dummy/initializers/ember-cli-mirage\", \"dummy/tests/helpers/f\"], function (_qunit, _emberQunit, _testHelpers, _modelsTableBs, _emberCliMirage, _f) {\n  \"use strict\";\n\n  const {\n    numericNavigation\n  } = _modelsTableBs.default;\n  (0, _qunit.module)('Integration | Component | models table/pagination numeric', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.server = (0, _emberCliMirage.startMirage)();\n      this.server.createList('user', 100);\n      this.setProperties({\n        data: this.server.db.users,\n        columns: (0, _f.generateColumns)(['index'])\n      });\n    });\n    hooks.afterEach(function () {\n      this.server.shutdown();\n    });\n    (0, _qunit.test)('buttons are shown', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n          {{#models-table data=data columns=columns as |mt|}}\n            {{#mt.footer as |footer|}}\n              {{footer.pagination-numeric}}\n            {{/mt.footer}}\n          {{/models-table}}\n      */\n      {\n        id: \"mS/7RBdX\",\n        block: \"{\\\"symbols\\\":[\\\"mt\\\",\\\"footer\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]],{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,1,[\\\"footer\\\"]],\\\"expected `mt.footer` to be a contextual component but found a string. Did you mean `(component mt.footer)`? (L3:C9) \\\"],null]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[1,[23,2,[\\\"pagination-numeric\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(numericNavigation.mapBy('text'), ['1', '2', '...', '10']);\n      await numericNavigation.objectAt(1).click();\n      assert.deepEqual(numericNavigation.mapBy('text'), ['1', '2', '3', '...', '10']);\n    });\n    (0, _qunit.test)('buttons are shown (2)', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n          {{#models-table data=data columns=columns as |mt|}}\n            {{#mt.footer as |footer|}}\n              {{#footer.pagination-numeric as |pn|}}\n                {{#each pn.visiblePageNumbers as |page|}}\n                  {{#if page.isLink}}\n                    <button type=\"button\" class=\"{{if page.isActive \"active\"}}\"\n                    {{action pn.gotoCustomPage page.label}}>{{page.label}}</button>\n                  {{else}}\n                    <button disabled=\"disabled\" type=\"button\" \n                      {{action pn.gotoCustomPage page.label}}>{{page.label}}</button>\n                  {{/if}}\n                {{/each}}\n              {{/footer.pagination-numeric}}\n            {{/mt.footer}}\n          {{/models-table}}\n      */\n      {\n        id: \"VboIGLsj\",\n        block: \"{\\\"symbols\\\":[\\\"mt\\\",\\\"footer\\\",\\\"pn\\\",\\\"page\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table\\\",null,[[\\\"data\\\",\\\"columns\\\"],[[24,[\\\"data\\\"]],[24,[\\\"columns\\\"]]]],{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,1,[\\\"footer\\\"]],\\\"expected `mt.footer` to be a contextual component but found a string. Did you mean `(component mt.footer)`? (L3:C9) \\\"],null]],null,{\\\"statements\\\":[[4,\\\"component\\\",[[28,\\\"-assert-implicit-component-helper-argument\\\",[[23,2,[\\\"pagination-numeric\\\"]],\\\"expected `footer.pagination-numeric` to be a contextual component but found a string. Did you mean `(component footer.pagination-numeric)`? (L4:C11) \\\"],null]],null,{\\\"statements\\\":[[4,\\\"each\\\",[[23,3,[\\\"visiblePageNumbers\\\"]]],null,{\\\"statements\\\":[[4,\\\"if\\\",[[23,4,[\\\"isLink\\\"]]],null,{\\\"statements\\\":[[0,\\\"              \\\"],[7,\\\"button\\\",false],[12,\\\"class\\\",[29,[[28,\\\"if\\\",[[23,4,[\\\"isActive\\\"]],\\\"active\\\"],null]]]],[12,\\\"type\\\",\\\"button\\\"],[3,\\\"action\\\",[[23,0,[]],[23,3,[\\\"gotoCustomPage\\\"]],[23,4,[\\\"label\\\"]]]],[8],[1,[23,4,[\\\"label\\\"]],false],[9],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},{\\\"statements\\\":[[0,\\\"              \\\"],[7,\\\"button\\\",false],[12,\\\"disabled\\\",\\\"disabled\\\"],[12,\\\"type\\\",\\\"button\\\"],[3,\\\"action\\\",[[23,0,[]],[23,3,[\\\"gotoCustomPage\\\"]],[23,4,[\\\"label\\\"]]]],[8],[1,[23,4,[\\\"label\\\"]],false],[9],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]}]],\\\"parameters\\\":[4]},null]],\\\"parameters\\\":[3]},null]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.deepEqual(numericNavigation.mapBy('text'), ['1', '2', '...', '10']);\n      await numericNavigation.objectAt(1).click();\n      assert.deepEqual(numericNavigation.mapBy('text'), ['1', '2', '3', '...', '10']);\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/row-filtering-cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/row filtering cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/row-filtering-cell}}\n      */\n      {\n        id: \"katb2Evz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/row-filtering-cell\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/row-filtering-cell}}\n              template block text\n            {{/models-table/row-filtering-cell}}\n          \n      */\n      {\n        id: \"Xx9PDQSu\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/row-filtering-cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/row-group-toggle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/row group toggle', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/row-group-toggle}}\n      */\n      {\n        id: \"4oZDzv1v\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/row-group-toggle\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/row-group-toggle}}\n              template block text\n            {{/models-table/row-group-toggle}}\n          \n      */\n      {\n        id: \"4Npai4y/\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/row-group-toggle\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/row-grouping-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/row grouping', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', function (assert) {\n      assert.ok(true);\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/row-sorting-cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/row sorting cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/row-sorting-cell}}\n      */\n      {\n        id: \"RdRFklLy\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/row-sorting-cell\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/row-sorting-cell}}\n              template block text\n            {{/models-table/row-sorting-cell}}\n          \n      */\n      {\n        id: \"BZ1asDrM\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/row-sorting-cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/bootstrap4/columns-dropdown-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/bootstrap4/columns dropdown', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/bootstrap4/columns-dropdown}}\n      */\n      {\n        id: \"OhTr1O1x\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/bootstrap4/columns-dropdown\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/bootstrap4/columns-dropdown}}\n              template block text\n            {{/models-table/themes/bootstrap4/columns-dropdown}}\n          \n      */\n      {\n        id: \"mxWZS5G4\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/bootstrap4/columns-dropdown\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/bootstrap4/data-group-by-select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/bootstrap4/data group by select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', function (assert) {\n      assert.ok(true);\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/bootstrap4/global-filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/bootstrap4/global filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/bootstrap4/global-filter}}\n      */\n      {\n        id: \"H7uZrE88\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/bootstrap4/global-filter\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/bootstrap4/global-filter}}\n              template block text\n            {{/models-table/themes/bootstrap4/global-filter}}\n          \n      */\n      {\n        id: \"hJ2MYHdo\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/bootstrap4/global-filter\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/bootstrap4/row-filtering-cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/bootstrap4/row filtering cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/bootstrap4/row-filtering-cell}}\n      */\n      {\n        id: \"U5+uBCQg\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/bootstrap4/row-filtering-cell\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/bootstrap4/row-filtering-cell}}\n              template block text\n            {{/models-table/themes/bootstrap4/row-filtering-cell}}\n          \n      */\n      {\n        id: \"e7KgXS4d\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/bootstrap4/row-filtering-cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/ember-semanticui/row-filtering-cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models-table/themes/ember-semanticui/row-filtering-cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/ember-semanticui/row-filtering-cell}}\n      */\n      {\n        id: \"/XYOU2AS\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/ember-semanticui/row-filtering-cell\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/ember-semanticui/row-filtering-cell}}\n              template block text\n            {{/models-table/themes/ember-semanticui/row-filtering-cell}}\n          \n      */\n      {\n        id: \"Ne2Ubb0M\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/ember-semanticui/row-filtering-cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/columns-dropdown-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/columns dropdown', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/columns-dropdown}}\n      */\n      {\n        id: \"2Au0xgdg\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/columns-dropdown\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/columns-dropdown}}\n              template block text\n            {{/models-table/themes/semanticui/columns-dropdown}}\n          \n      */\n      {\n        id: \"fwAy7ou4\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/columns-dropdown\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/data-group-by-select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/data group by select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', function (assert) {\n      assert.ok(true);\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/global-filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/global filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/global-filter}}\n      */\n      {\n        id: \"d/VUOLh2\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/global-filter\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/global-filter}}\n              template block text\n            {{/models-table/themes/semanticui/global-filter}}\n          \n      */\n      {\n        id: \"lqcYDbPd\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/global-filter\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/pagination-numeric-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/pagination numeric', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/pagination-numeric}}\n      */\n      {\n        id: \"i8FSD/Ws\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/pagination-numeric\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/pagination-numeric}}\n              template block text\n            {{/models-table/themes/semanticui/pagination-numeric}}\n          \n      */\n      {\n        id: \"JcR0vbDT\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/pagination-numeric\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/pagination-simple-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/pagination simple', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/pagination-simple}}\n      */\n      {\n        id: \"URnEQMQB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/pagination-simple\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/pagination-simple}}\n              template block text\n            {{/models-table/themes/semanticui/pagination-simple}}\n          \n      */\n      {\n        id: \"u1o+UoO5\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/pagination-simple\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/row-filtering-cell-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/row filtering cell', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/row-filtering-cell}}\n      */\n      {\n        id: \"gbnnDf6r\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/row-filtering-cell\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/row-filtering-cell}}\n              template block text\n            {{/models-table/themes/semanticui/row-filtering-cell}}\n          \n      */\n      {\n        id: \"fcJVnG9r\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/row-filtering-cell\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models table/themes/semanticui/select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/select}}\n      */\n      {\n        id: \"DokGlsQe\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/select\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/select}}\n              template block text\n            {{/models-table/themes/semanticui/select}}\n          \n      */\n      {\n        id: \"Wtd151kn\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/select\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/components/models-table/themes/semanticui/summary-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | models-table/themes/semanticui/summary', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{models-table/themes/semanticui/summary}}\n      */\n      {\n        id: \"+AkiZtGf\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"models-table/themes/semanticui/summary\\\"],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            {{#models-table/themes/semanticui/summary}}\n              template block text\n            {{/models-table/themes/semanticui/summary}}\n          \n      */\n      {\n        id: \"X/hHCBI/\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"models-table/themes/semanticui/summary\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"dummy/tests/integration/helpers/and-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('helper:and', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{#if (and inputValue)}}1234{{/if}}\n      */\n      {\n        id: \"tRSuakUB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"if\\\",[[28,\\\"and\\\",[[24,[\\\"inputValue\\\"]]],null]],null,{\\\"statements\\\":[[0,\\\"1234\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define(\"dummy/tests/integration/helpers/not-eq-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | not-eq', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{#if (not-eq inputValue '1234')}}not-eq{{else}}eq{{/if}}\n      */\n      {\n        id: \"kL7yRVHl\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"if\\\",[[28,\\\"not-eq\\\",[[24,[\\\"inputValue\\\"]],\\\"1234\\\"],null]],null,{\\\"statements\\\":[[0,\\\"not-eq\\\"]],\\\"parameters\\\":[]},{\\\"statements\\\":[[0,\\\"eq\\\"]],\\\"parameters\\\":[]}]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'eq');\n      this.set('inputValue', '4321');\n      assert.equal(this.element.textContent.trim(), 'not-eq');\n    });\n  });\n});","define(\"dummy/tests/integration/helpers/stringify-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | stringify', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{stringify inputValue}}\n      */\n      {\n        id: \"BiVLImZ2\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"stringify\\\",[[24,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), '\"1234\"');\n    });\n  });\n});","define(\"dummy/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/cell-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/cell-component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/custom-action.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-action.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/custom-concat.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-concat.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/custom-pagination.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-pagination.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/custom-row-group-toggle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-row-group-toggle.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/custom-sort-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-sort-cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/delete-row-comp.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-row-comp.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/expand-all-toggle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expand-all-toggle.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/expand-toggle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expand-toggle.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/expanded-row.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expanded-row.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/filter-cell-input.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/filter-cell-input.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/filter-cell-select.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/filter-cell-select.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/group-header-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/group-header-cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/group-summary-row.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/group-summary-row.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/select-all-rows-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/select-all-rows-checkbox.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/select-row-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/select-row-checkbox.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/sort-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sort-cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/themes/ember-semanticui/filter-cell-select.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/themes/ember-semanticui/filter-cell-select.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/examples/common-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/common-table.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/examples/custom-components-in-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/custom-components-in-cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/examples/display-data-changed-action.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/display-data-changed-action.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/examples/grouped-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/grouped-rows.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/examples/in-line-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/in-line-edit.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/examples/select-rows-with-checkboxes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/select-rows-with-checkboxes.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('instance-initializers/emt-inject.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/emt-inject.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/add-remove-column.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/add-remove-column.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/column-sets.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/column-sets.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/common-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/common-table.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/custom-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/custom-actions.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/custom-column-classes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/custom-column-classes.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/custom-components-in-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/custom-components-in-cell.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/custom-messages.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/custom-messages.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/display-data-changed-action.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/display-data-changed-action.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/example.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/expandable-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/expandable-rows.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/filtering.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/filtering.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/grouped-headers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/grouped-headers.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/grouped-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/grouped-rows.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/in-line-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/in-line-edit.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/route-cells.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/route-cells.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/select-rows-with-checkboxes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/select-rows-with-checkboxes.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/examples/sort-by-filter-by.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/sort-by-filter-by.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/users/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('dummy/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/cell-component.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/cell-component.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/custom-action.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/custom-action.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/custom-concat.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/custom-concat.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/custom-pagination.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/custom-pagination.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/custom-row-group-toggle.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/custom-row-group-toggle.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/custom-sort-cell.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/custom-sort-cell.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/delete-row-comp.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/delete-row-comp.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/expand-all-toggle.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/expand-all-toggle.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/expand-toggle.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/expand-toggle.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/expanded-row.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/expanded-row.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/filter-cell-input.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/filter-cell-input.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/filter-cell-select.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/filter-cell-select.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/group-header-cell.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/group-header-cell.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/group-summary-row.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/group-summary-row.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/select-all-rows-checkbox.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/select-all-rows-checkbox.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/select-row-checkbox.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/select-row-checkbox.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/sort-cell.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/sort-cell.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/themes/ember-semanticui/filter-cell-select.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/themes/ember-semanticui/filter-cell-select.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/column-sets.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/column-sets.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/common-table.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/common-table.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/custom-column-classes.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/custom-column-classes.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/custom-components-in-cell.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/custom-components-in-cell.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/custom-messages.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/custom-messages.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/display-data-changed-action.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/display-data-changed-action.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/expandable-rows.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/expandable-rows.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/filtering.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/filtering.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/grouped-headers.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/grouped-headers.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/grouped-rows.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/grouped-rows.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/in-line-edit.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/in-line-edit.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/route-cells.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/route-cells.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/select-rows-with-checkboxes.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/select-rows-with-checkboxes.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/examples/sort-by-filter-by.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/examples/sort-by-filter-by.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/users/user.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/users/user.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"dummy/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/models-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/models-table-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/f.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/f.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/get-page-object.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-page-object.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/get-theme-class.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-theme-class.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table-server-paginated-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table-server-paginated-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/cell-content-display-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/cell-content-display-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/cell-content-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/cell-content-edit-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/cell-edit-toggle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/cell-edit-toggle-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/data-group-by-select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/data-group-by-select-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/group-summary-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/group-summary-row-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/page-size-select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/page-size-select-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/pagination-numeric-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/pagination-numeric-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/row-filtering-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/row-filtering-cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/row-group-toggle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/row-group-toggle-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/row-grouping-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/row-grouping-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/row-sorting-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/row-sorting-cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/bootstrap4/columns-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/bootstrap4/columns-dropdown-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/bootstrap4/data-group-by-select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/bootstrap4/data-group-by-select-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/bootstrap4/global-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/bootstrap4/global-filter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/bootstrap4/row-filtering-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/bootstrap4/row-filtering-cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/ember-semanticui/row-filtering-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/ember-semanticui/row-filtering-cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/columns-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/columns-dropdown-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/data-group-by-select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/data-group-by-select-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/global-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/global-filter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/pagination-numeric-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/pagination-numeric-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/pagination-simple-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/pagination-simple-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/row-filtering-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/row-filtering-cell-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/select-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/models-table/themes/semanticui/summary-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/models-table/themes/semanticui/summary-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/helpers/and-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/and-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/helpers/not-eq-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/not-eq-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/helpers/stringify-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/stringify-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pages/models-table-bs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/models-table-bs.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pages/models-table-bs4.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/models-table-bs4.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pages/models-table-semanticui.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/models-table-semanticui.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/components/models-table-server-paginated-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/models-table-server-paginated-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/better-compare-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/better-compare-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/fmt-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/fmt-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/page-object\", [\"exports\", \"ember-cli-page-object\"], function (_exports, _emberCliPageObject) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"alias\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.alias;\n    }\n  });\n  Object.defineProperty(_exports, \"attribute\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.attribute;\n    }\n  });\n  Object.defineProperty(_exports, \"clickOnText\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.clickOnText;\n    }\n  });\n  Object.defineProperty(_exports, \"clickable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.clickable;\n    }\n  });\n  Object.defineProperty(_exports, \"collection\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.collection;\n    }\n  });\n  Object.defineProperty(_exports, \"contains\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.contains;\n    }\n  });\n  Object.defineProperty(_exports, \"count\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.count;\n    }\n  });\n  Object.defineProperty(_exports, \"create\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.create;\n    }\n  });\n  Object.defineProperty(_exports, \"fillable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.fillable;\n    }\n  });\n  Object.defineProperty(_exports, \"selectable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.fillable;\n    }\n  });\n  Object.defineProperty(_exports, \"focusable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.focusable;\n    }\n  });\n  Object.defineProperty(_exports, \"hasClass\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.hasClass;\n    }\n  });\n  Object.defineProperty(_exports, \"is\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.is;\n    }\n  });\n  Object.defineProperty(_exports, \"isHidden\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.isHidden;\n    }\n  });\n  Object.defineProperty(_exports, \"isPresent\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.isPresent;\n    }\n  });\n  Object.defineProperty(_exports, \"isVisible\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.isVisible;\n    }\n  });\n  Object.defineProperty(_exports, \"notHasClass\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.notHasClass;\n    }\n  });\n  Object.defineProperty(_exports, \"property\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.property;\n    }\n  });\n  Object.defineProperty(_exports, \"text\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.text;\n    }\n  });\n  Object.defineProperty(_exports, \"triggerable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.triggerable;\n    }\n  });\n  Object.defineProperty(_exports, \"value\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.value;\n    }\n  });\n  Object.defineProperty(_exports, \"visitable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.visitable;\n    }\n  });\n  Object.defineProperty(_exports, \"buildSelector\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.buildSelector;\n    }\n  });\n  Object.defineProperty(_exports, \"findElementWithAssert\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.findElementWithAssert;\n    }\n  });\n  Object.defineProperty(_exports, \"findElement\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.findElement;\n    }\n  });\n  Object.defineProperty(_exports, \"getContext\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.getContext;\n    }\n  });\n  Object.defineProperty(_exports, \"fullScope\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.fullScope;\n    }\n  });\n  _exports.default = void 0;\n  var _default = {\n    alias: _emberCliPageObject.alias,\n    attribute: _emberCliPageObject.attribute,\n    blurrable: _emberCliPageObject.blurrable,\n    clickOnText: _emberCliPageObject.clickOnText,\n    clickable: _emberCliPageObject.clickable,\n    collection: _emberCliPageObject.collection,\n    contains: _emberCliPageObject.contains,\n    count: _emberCliPageObject.count,\n    create: _emberCliPageObject.create,\n    fillable: _emberCliPageObject.fillable,\n    focusable: _emberCliPageObject.focusable,\n    hasClass: _emberCliPageObject.hasClass,\n    is: _emberCliPageObject.is,\n    isHidden: _emberCliPageObject.isHidden,\n    isPresent: _emberCliPageObject.isPresent,\n    isVisible: _emberCliPageObject.isVisible,\n    notHasClass: _emberCliPageObject.notHasClass,\n    property: _emberCliPageObject.property,\n    selectable: _emberCliPageObject.fillable,\n    text: _emberCliPageObject.text,\n    triggerable: _emberCliPageObject.triggerable,\n    value: _emberCliPageObject.value,\n    visitable: _emberCliPageObject.visitable\n  };\n  _exports.default = _default;\n  (true && !(false) && Ember.deprecate(`Importing from \"test-support\" is now deprecated. Please import directly from the \"ember-cli-page-object\" module instead.`, false, {\n    id: 'ember-cli-page-object.import-from-test-support',\n    until: '2.0.0',\n    url: 'https://ember-cli-page-object.js.org/docs/v1.16.x/deprecations/#import-from-test-support'\n  }));\n});","define(\"dummy/tests/pages/models-table-bs\", [\"exports\", \"ember-cli-page-object\", \"ember-cli-page-object/macros\"], function (_exports, _emberCliPageObject, _macros) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _exports.definition = void 0;\n  const definition = {\n    scope: '.models-table-wrapper',\n    tablesCount: (0, _emberCliPageObject.count)('table'),\n    summary: (0, _emberCliPageObject.text)('.table-summary'),\n    globalFilterLabel: (0, _emberCliPageObject.text)('.globalSearch label'),\n    globalFilterFocused: (0, _macros.getter)(function () {\n      return document.activeElement === (0, _emberCliPageObject.findElement)(document, '.globalSearch input')[0];\n    }),\n    clickGlobalFilterLabel: (0, _emberCliPageObject.clickable)('.globalSearch label'),\n    doGlobalFilter: (0, _emberCliPageObject.fillable)('.filterString'),\n    clearGlobalFilter: (0, _emberCliPageObject.clickable)('.globalSearch .clearFilterIcon'),\n    clearGlobalFilterExists: (0, _emberCliPageObject.isPresent)('.globalSearch .clearFilterIcon'),\n    clearGlobalFilterDisabled: (0, _emberCliPageObject.attribute)('disabled', '.globalSearch .clearFilterIcon'),\n    tableFooterCount: (0, _emberCliPageObject.count)('.table-footer'),\n    clearAllFilters: (0, _emberCliPageObject.clickable)('.clearFilters'),\n    clearAllFiltersExists: (0, _emberCliPageObject.isPresent)('.clearFilters'),\n    clearAllFiltersDisabled: (0, _emberCliPageObject.attribute)('disabled', '.clearFilters'),\n    changePageSize: (0, _emberCliPageObject.fillable)('select.changePageSize'),\n    pageSize: (0, _emberCliPageObject.value)('select.changePageSize'),\n    expandAllRows: (0, _emberCliPageObject.clickable)('thead .expand-all-rows'),\n    collapseAllRows: (0, _emberCliPageObject.clickable)('thead .collapse-all-rows'),\n    toggleAllSelection: (0, _emberCliPageObject.clickable)('thead .toggle-all'),\n    expandRowButtons: (0, _emberCliPageObject.count)('a.expand-row'),\n    collapseRowButtons: (0, _emberCliPageObject.count)('a.collapse-row'),\n    filters: (0, _emberCliPageObject.collection)('table thead tr:eq(1) th', {\n      content: (0, _emberCliPageObject.text)(),\n      inputFilter: (0, _emberCliPageObject.fillable)('input'),\n      inputValue: (0, _emberCliPageObject.value)('input'),\n      inputPlaceholder: (0, _emberCliPageObject.attribute)('placeholder', 'input'),\n      inputFilterExists: (0, _emberCliPageObject.isPresent)('input'),\n      clearFilter: (0, _emberCliPageObject.clickable)('.clearFilterIcon'),\n      clearFilterExists: (0, _emberCliPageObject.isPresent)('.clearFilterIcon'),\n      clearFilterDisabled: (0, _emberCliPageObject.attribute)('disabled', '.clearFilterIcon'),\n      selectFilter: (0, _emberCliPageObject.fillable)('select'),\n      selectFilterExists: (0, _emberCliPageObject.isPresent)('select'),\n      selectPlaceholder: (0, _emberCliPageObject.text)('select option:eq(0)'),\n      selectValue: (0, _emberCliPageObject.value)('select'),\n      selectOptions: (0, _emberCliPageObject.text)('select option', {\n        multiple: true\n      }),\n      colspan: (0, _emberCliPageObject.attribute)('colspan'),\n      label: (0, _emberCliPageObject.text)('label.emt-sr-only')\n    }),\n    sorting: (0, _emberCliPageObject.collection)('table thead tr:eq(0) th', {\n      title: (0, _emberCliPageObject.text)(),\n      hasSortMarker: (0, _emberCliPageObject.isPresent)('i'),\n      isSorted: (0, _emberCliPageObject.hasClass)('glyphicon', 'i'),\n      colspan: (0, _emberCliPageObject.attribute)('colspan')\n    }),\n    headers: (0, _emberCliPageObject.collection)('thead tr', {\n      cells: (0, _emberCliPageObject.text)('th', {\n        multiple: true\n      }),\n      colspans: (0, _emberCliPageObject.attribute)('colspan', 'th', {\n        multiple: true\n      })\n    }),\n    footer: {\n      scope: 'tfoot',\n      cells: (0, _emberCliPageObject.collection)('tr td', {\n        isComponent: (0, _emberCliPageObject.hasClass)('ember-view')\n      })\n    },\n    navigation: {\n      scope: '.table-nav',\n      text: (0, _emberCliPageObject.text)(''),\n      selectPageNumberExists: (0, _emberCliPageObject.isPresent)('select'),\n      selectPageNumber: (0, _emberCliPageObject.fillable)('select'),\n      selectPageNumberDisabled: (0, _emberCliPageObject.property)('disabled', 'select'),\n      selectedPageNumber: (0, _emberCliPageObject.value)('select'),\n      goToLastPage: (0, _emberCliPageObject.clickable)('button:eq(3)'),\n      goToLastPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(3)'),\n      goToNextPage: (0, _emberCliPageObject.clickable)('button:eq(2)'),\n      goToNextPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(2)'),\n      goToPrevPage: (0, _emberCliPageObject.clickable)('button:eq(1)'),\n      goToPrevPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(1)'),\n      goToFirstPage: (0, _emberCliPageObject.clickable)('button:eq(0)'),\n      goToFirstPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(0)'),\n      navigationButtons: (0, _emberCliPageObject.text)('button', {\n        multiple: true\n      }),\n      btns: (0, _emberCliPageObject.collection)('button', {\n        icon: (0, _emberCliPageObject.attribute)('class', 'i')\n      }),\n      disabledNavigationLinksCount: (0, _emberCliPageObject.count)('button.disabled')\n    },\n    numericNavigation: (0, _emberCliPageObject.collection)('.table-nav button', {\n      label: (0, _emberCliPageObject.text)()\n    }),\n    allRows: (0, _emberCliPageObject.collection)('tbody tr:not(.expand-row)', {\n      isGroupingRow: (0, _macros.getter)(function () {\n        return !!this.cells.toArray().find(c => c.isGroupingRowCell);\n      }),\n      cells: (0, _emberCliPageObject.collection)('td', {\n        isGroupingRowCell: (0, _emberCliPageObject.hasClass)('grouping-cell')\n      })\n    }),\n    rows: (0, _emberCliPageObject.collection)('tbody tr:not(.expand-row):not(.grouping-row)', {\n      expand: (0, _emberCliPageObject.clickable)('a.expand-row'),\n      collapse: (0, _emberCliPageObject.clickable)('a.collapse-row'),\n      expanded: (0, _emberCliPageObject.hasClass)('expanded-row'),\n      collapsed: (0, _emberCliPageObject.notHasClass)('expanded-row'),\n      selected: (0, _emberCliPageObject.hasClass)('selected-row'),\n      dbClick: (0, _emberCliPageObject.triggerable)('dblclick'),\n      hover: (0, _emberCliPageObject.triggerable)('mouseenter'),\n      out: (0, _emberCliPageObject.triggerable)('mouseleave'),\n\n      getSelf() {\n        return (0, _emberCliPageObject.findElement)(document, this.scope)[0];\n      },\n\n      getCellColspans() {\n        return this.cells.mapBy('colspan');\n      },\n\n      cells: (0, _emberCliPageObject.collection)('td', {\n        content: (0, _emberCliPageObject.text)(),\n        colspan: (0, _emberCliPageObject.attribute)('colspan'),\n        groupSummaryVisible: (0, _emberCliPageObject.text)('.visible'),\n        groupSummaryExpanded: (0, _emberCliPageObject.text)('.expanded'),\n        groupSummarySelected: (0, _emberCliPageObject.text)('.selected')\n      })\n    }),\n    rowExpands: (0, _emberCliPageObject.collection)('tbody tr.expand-row', {\n      selected: (0, _emberCliPageObject.hasClass)('selected-expand'),\n      id: (0, _emberCliPageObject.text)('.id')\n    }),\n    groupByFieldExists: (0, _emberCliPageObject.isPresent)('.change-group-by-field'),\n    changeGroupByField: (0, _emberCliPageObject.fillable)('.change-group-by-field'),\n    groupByFieldOptions: (0, _emberCliPageObject.collection)('.change-group-by-field option', {\n      label: (0, _emberCliPageObject.text)()\n    }),\n    sortByGroupedBy: (0, _emberCliPageObject.clickable)('.data-group-by-wrapper button'),\n\n    /**\n     * Use only when group-value is shown in the separated row!\n     */\n    groupingRowsByRow: (0, _emberCliPageObject.collection)('tbody tr.grouping-row', {\n      cell: {\n        scope: 'td:eq(0)',\n        content: (0, _emberCliPageObject.text)(),\n        colspan: (0, _emberCliPageObject.attribute)('colspan'),\n        toggleGroup: (0, _emberCliPageObject.clickable)('a'),\n        toggleSelection: (0, _emberCliPageObject.clickable)('.toggle-selection-group'),\n        toggleExpands: (0, _emberCliPageObject.clickable)('.toggle-expands-group'),\n        toggleText: (0, _emberCliPageObject.text)('a'),\n        expandedCountText: (0, _emberCliPageObject.text)('.expanded-count'),\n        selectedCountText: (0, _emberCliPageObject.text)('.selected-count')\n      }\n    }),\n\n    getIndexOfFirstRowGroupedByRow(groupIndex) {\n      let index = 0;\n      let groupedCount = 0;\n      this.allRows.forEach((row, i) => {\n        if (row.isGroupingRow) {\n          groupedCount++;\n        }\n\n        if (groupedCount === groupIndex) {\n          index = i + 1;\n        }\n      });\n      return index;\n    },\n\n    /*\n     * Use only when group-value is shown in the separated row!\n     */\n    getRowsIndexesFromGroupRow(groupIndex) {\n      const first = this.getIndexOfFirstRowGroupedByRow(groupIndex) - groupIndex;\n      let last = 0;\n\n      if (this.groupingRowsByRow.length > groupIndex + 1) {\n        last = this.getIndexOfFirstRowGroupedByRow(groupIndex + 1) - groupIndex - 1;\n      } else {\n        last = this.rows.length;\n      }\n\n      return {\n        first: parseInt(first, 10),\n        last: parseInt(last, 10)\n      };\n    },\n\n    /*\n     * Use only when group-value is shown in the separated row!\n     */\n    getRowsFromGroupRow(groupIndex) {\n      const {\n        first,\n        last\n      } = this.getRowsIndexesFromGroupRow(groupIndex);\n      return this.rows.toArray().slice(first, last);\n    },\n\n    /**\n     * Use only when group-value is shown in the separated column!\n     */\n    groupingRowsByColumn: (0, _emberCliPageObject.collection)('tbody td.grouping-cell', {\n      content: (0, _emberCliPageObject.text)(),\n      rowspan: (0, _emberCliPageObject.attribute)('rowspan'),\n      toggleGroup: (0, _emberCliPageObject.clickable)('a'),\n      toggleSelection: (0, _emberCliPageObject.clickable)('.toggle-selection-group'),\n      toggleExpands: (0, _emberCliPageObject.clickable)('.toggle-expands-group'),\n      toggleText: (0, _emberCliPageObject.text)('a'),\n      expandedCountText: (0, _emberCliPageObject.text)('.expanded-count'),\n      selectedCountText: (0, _emberCliPageObject.text)('.selected-count')\n    }),\n\n    getIndexOfFirstRowGroupedByColumn(groupIndex) {\n      let index = 0;\n      let groupedCount = 0;\n      this.allRows.forEach((row, i) => {\n        if (row.isGroupingRow) {\n          groupedCount++;\n        }\n\n        if (groupedCount === groupIndex) {\n          index = i + 1;\n        }\n      });\n      return index;\n    },\n\n    /*\n     * Use only when group-value is shown in the separated column!\n     */\n    getRowsIndexesFromGroupColumn(groupIndex) {\n      const first = this.getIndexOfFirstRowGroupedByColumn(groupIndex);\n      let last = 0;\n\n      if (this.groupingRowsByColumn.length > groupIndex + 1) {\n        last = this.getIndexOfFirstRowGroupedByColumn(groupIndex + 1) - 1;\n      } else {\n        last = this.rows.length - 1;\n      }\n\n      return {\n        first: parseInt(first, 10),\n        last: parseInt(last, 10)\n      };\n    },\n\n    /*\n     * Use only when group-value is shown in the separated column!\n     */\n    getRowsFromGroupColumn(groupIndex) {\n      const {\n        first,\n        last\n      } = this.getRowsIndexesFromGroupColumn(groupIndex);\n      return this.rows.toArray().slice(first, last);\n    },\n\n    getCellsCount() {\n      return this.rows.map(row => row.cells.length).reduce((a, b) => a + b, 0);\n    },\n\n    getColumnCells(columnIndex, startRow = 0, endRow = Number.POSITIVE_INFINITY) {\n      return this.rows.toArray().slice(startRow, endRow).map(row => {\n        const index = columnIndex < 0 ? row.cells.length + columnIndex : columnIndex;\n        return row.cells.objectAt(index).content;\n      });\n    },\n\n    columnsDropdownLabel: (0, _emberCliPageObject.text)('.columns-dropdown button'),\n    toggleColumnDropDown: (0, _emberCliPageObject.clickable)('.columns-dropdown .dropdown-toggle'),\n    columnsDropDown: (0, _emberCliPageObject.collection)('.columns-dropdown li a', {\n      toggleLabel: (0, _emberCliPageObject.text)('button'),\n      label: (0, _emberCliPageObject.text)()\n    }),\n    firstColumnIconSelector: '.columns-dropdown li:nth-child(5) a i',\n    secondColumnIconSelector: '.columns-dropdown li:nth-child(6) a i',\n    checkedIconClass: 'glyphicon-check',\n    uncheckedIconClass: 'glyphicon-unchecked'\n  };\n  _exports.definition = definition;\n\n  var _default = (0, _emberCliPageObject.create)(definition);\n\n  _exports.default = _default;\n});","define(\"dummy/tests/pages/models-table-bs4\", [\"exports\", \"ember-cli-page-object\", \"dummy/tests/pages/models-table-bs\"], function (_exports, _emberCliPageObject, _modelsTableBs) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _exports.definition = void 0;\n  const definition = Object.assign({}, _modelsTableBs.definition, {\n    sorting: (0, _emberCliPageObject.collection)('table thead tr:eq(0) th', {\n      title: (0, _emberCliPageObject.text)(),\n      hasSortMarker: (0, _emberCliPageObject.isPresent)('i'),\n      isSorted: (0, _emberCliPageObject.hasClass)('fa', 'i'),\n      colspan: (0, _emberCliPageObject.attribute)('colspan')\n    }),\n    columnsDropDown: (0, _emberCliPageObject.collection)('.columns-dropdown a', {\n      toggleLabel: (0, _emberCliPageObject.text)('button'),\n      label: (0, _emberCliPageObject.text)()\n    }),\n    firstColumnIconSelector: '.columns-dropdown a:nth-child(5) i',\n    secondColumnIconSelector: '.columns-dropdown a:nth-child(6) i',\n    checkedIconClass: 'fa fa-check-square-o',\n    uncheckedIconClass: 'fa fa-square-o'\n  });\n  _exports.definition = definition;\n\n  var _default = (0, _emberCliPageObject.create)(definition);\n\n  _exports.default = _default;\n});","define(\"dummy/tests/pages/models-table-semanticui\", [\"exports\", \"ember-cli-page-object\", \"@ember/test-helpers\", \"dummy/tests/pages/models-table-bs\"], function (_exports, _emberCliPageObject, _testHelpers, _modelsTableBs) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _exports.definition = void 0;\n\n  function getDataId(attributeName, selector, clb) {\n    return {\n      isDescriptor: true,\n\n      get() {\n        let elements = (0, _emberCliPageObject.findElement)(this, selector);\n        return elements.length ? clb(elements[0].getAttribute(attributeName)) : '';\n      }\n\n    };\n  }\n\n  const definition = Object.assign({}, _modelsTableBs.definition, {\n    navigation: {\n      scope: '.table-nav',\n      text: (0, _emberCliPageObject.text)(''),\n      goToLastPage: (0, _emberCliPageObject.clickable)('button:eq(3)'),\n      goToLastPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(3)'),\n      goToNextPage: (0, _emberCliPageObject.clickable)('button:eq(2)'),\n      goToNextPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(2)'),\n      goToPrevPage: (0, _emberCliPageObject.clickable)('button:eq(1)'),\n      goToPrevPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(1)'),\n      goToFirstPage: (0, _emberCliPageObject.clickable)('button:eq(0)'),\n      goToFirstPageDisabled: (0, _emberCliPageObject.hasClass)('disabled', 'button:eq(0)'),\n      navigationButtons: (0, _emberCliPageObject.text)('button', {\n        multiple: true\n      }),\n      btns: (0, _emberCliPageObject.collection)('button', {\n        icon: (0, _emberCliPageObject.attribute)('class', 'i')\n      }),\n      disabledNavigationLinksCount: (0, _emberCliPageObject.count)('button.disabled'),\n      selectPageNumberExists: (0, _emberCliPageObject.isPresent)('.selection.compact.ui.dropdown'),\n\n      async selectPageNumber(number) {\n        await (0, _testHelpers.click)('.selection.compact.ui.dropdown');\n        await (0, _testHelpers.click)(`.selection.compact.ui.dropdown .menu .item[data-id='${JSON.stringify(number)}']`);\n      },\n\n      selectedPageNumber: (0, _emberCliPageObject.text)('.selection.compact.ui.dropdown .text'),\n      selectPageNumberDisabled: (0, _emberCliPageObject.hasClass)('disabled', '.selection.compact.ui.dropdown')\n    },\n\n    async changePageSize(size) {\n      await (0, _testHelpers.click)('.selection.compact.ui.dropdown');\n      await (0, _testHelpers.click)(`.selection.compact.ui.dropdown .menu .item[data-id='${JSON.stringify(size)}']`);\n    },\n\n    pageSize: (0, _emberCliPageObject.text)('.selection.compact.ui.dropdown .text'),\n    filters: (0, _emberCliPageObject.collection)('table thead tr:eq(1) th', {\n      content: (0, _emberCliPageObject.text)(),\n      inputFilter: (0, _emberCliPageObject.fillable)('input'),\n      inputValue: (0, _emberCliPageObject.value)('input'),\n      inputPlaceholder: (0, _emberCliPageObject.attribute)('placeholder', 'input'),\n      inputFilterExists: (0, _emberCliPageObject.isPresent)('input'),\n      clearFilter: (0, _emberCliPageObject.clickable)('.clearFilterIcon'),\n      clearFilterExists: (0, _emberCliPageObject.isPresent)('.clearFilterIcon'),\n      clearFilterDisabled: (0, _emberCliPageObject.attribute)('disabled', '.clearFilterIcon'),\n\n      async selectFilter(value) {\n        if (value === 'true') {\n          value = true;\n        }\n\n        if (value === 'false') {\n          value = false;\n        }\n\n        await (0, _testHelpers.click)('.selection.ui.dropdown');\n        await (0, _testHelpers.click)(`.selection.ui.dropdown .menu .item[data-id='${JSON.stringify(value)}']`);\n      },\n\n      selectFilterExists: (0, _emberCliPageObject.isPresent)('.selection.ui.dropdown'),\n      selectPlaceholder: (0, _emberCliPageObject.text)('.menu .item:eq(0)'),\n      selectValue: getDataId('data-id', '.selection.ui.dropdown .selected', v => JSON.parse(v)),\n      selectOptions: (0, _emberCliPageObject.text)('.selection.ui.dropdown .item', {\n        multiple: true\n      }),\n      colspan: (0, _emberCliPageObject.attribute)('colspan'),\n      label: (0, _emberCliPageObject.text)('label.emt-sr-only')\n    }),\n    columnsDropdownLabel: (0, _emberCliPageObject.text)('.ui.compact.menu.right.floated .text'),\n    toggleColumnDropDown: (0, _emberCliPageObject.clickable)('.ui.compact.menu.right.floated .ui.simple.dropdown'),\n    columnsDropDown: (0, _emberCliPageObject.collection)('.ui.compact.menu.right.floated .menu .item', {\n      toggleLabel: (0, _emberCliPageObject.text)(),\n      label: (0, _emberCliPageObject.text)()\n    }),\n    firstColumnIconSelector: '.ui.compact.menu.right.floated .menu .item:nth-child(5) i',\n    secondColumnIconSelector: '.ui.compact.menu.right.floated .menu .item:nth-child(6) i',\n    checkedIconClass: 'on',\n    uncheckedIconClass: 'off',\n\n    async changeGroupByField(value) {\n      await (0, _testHelpers.click)('.change-group-by-field');\n      await (0, _testHelpers.click)(`.change-group-by-field .menu .item[data-id='${JSON.stringify(value)}']`);\n    },\n\n    groupByFieldOptions: (0, _emberCliPageObject.collection)('.change-group-by-field .menu .item', {\n      label: (0, _emberCliPageObject.text)()\n    }),\n    sortByGroupedBy: (0, _emberCliPageObject.clickable)('.data-group-by-wrapper button'),\n    sorting: (0, _emberCliPageObject.collection)('table thead tr:eq(0) th', {\n      title: (0, _emberCliPageObject.text)(),\n      hasSortMarker: (0, _emberCliPageObject.isPresent)('i'),\n      isSorted: (0, _emberCliPageObject.hasClass)('sort', 'i'),\n      colspan: (0, _emberCliPageObject.attribute)('colspan')\n    })\n  });\n  _exports.definition = definition;\n\n  var _default = (0, _emberCliPageObject.create)(definition);\n\n  _exports.default = _default;\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-exam/test-support/load\"], function (_app, _environment, _testHelpers, _emberQunit, _load) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n  (0, _load.default)();\n});","define(\"dummy/tests/unit/components/models-table-server-paginated-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Component | models-table-server-paginated', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('#filteringIgnoreCase cannot be used', async function (assert) {\n      const component = this.owner.lookup('component:models-table-server-paginated');\n      assert.expectAssertion(() => Ember.set(component, 'filteringIgnoreCase', true), '\"filteringIgnoreCase\" can\\'t be used with \"models-table-server-paginated\"');\n    });\n    (0, _qunit.test)('#doFilteringByHiddenColumns cannot be used', async function (assert) {\n      const component = this.owner.lookup('component:models-table-server-paginated');\n      assert.expectAssertion(() => Ember.set(component, 'doFilteringByHiddenColumns', true), '\"doFilteringByHiddenColumns\" can\\'t be used with \"models-table-server-paginated\"');\n    });\n  });\n});","define(\"dummy/tests/unit/utils/better-compare-test\", [\"ember-models-table/utils/better-compare\", \"qunit\"], function (_betterCompare, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | better compare', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      let result = (0, _betterCompare.default)(1, 2);\n      assert.equal(result, -1, 'it works with numbers');\n      result = (0, _betterCompare.default)(2, 1);\n      assert.equal(result, 1, 'it works with equal numbers');\n      result = (0, _betterCompare.default)(0, 0);\n      assert.equal(result, 0, 'it works with equal numbers');\n      result = (0, _betterCompare.default)('aa', 'bb');\n      assert.equal(result, -1, 'it works with strings');\n      result = (0, _betterCompare.default)('aa', 'aa');\n      assert.equal(result, 0, 'it works with equal strings');\n      result = (0, _betterCompare.default)(true, false);\n      assert.equal(result, 1, 'it works with booleans');\n      result = (0, _betterCompare.default)(true, true);\n      assert.equal(result, 0, 'it works with equal booleans');\n      result = (0, _betterCompare.default)({}, {});\n      assert.equal(result, 0, 'it works with empty objects');\n      let a = Ember.Object.create({});\n      let b = Ember.Object.create({});\n      result = (0, _betterCompare.default)(a, b);\n      assert.equal(result, 0, 'it works with objects without valueOf method');\n      a = Ember.Object.create({\n        valueOf() {\n          return 2;\n        }\n\n      });\n      b = Ember.Object.create({\n        valueOf() {\n          return 1;\n        }\n\n      });\n      result = (0, _betterCompare.default)(a, b);\n      assert.equal(result, 1, 'it works with objects with valueOf method');\n    });\n  });\n});","define(\"dummy/tests/unit/utils/fmt-test\", [\"dummy/utils/fmt\", \"qunit\"], function (_fmt, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | fmt', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      const result = (0, _fmt.default)('Hi %@, I\\'m %@', 'John', 'Nico');\n      assert.equal(result, 'Hi John, I\\'m Nico');\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphtkvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnvvhvHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}